#!/usr/bin/bash

#_                   _ _ _  _ _____ _  _
#| | _______   ____ _| | | || |___  | || |
#| |/ / _ \ \ / / _` | | | || |_ / /| || |_
#|   <  __/\ V / (_| | | |__   _/ / |__   _|
#|_|\_\___| \_/ \__,_|_|_|  |_|/_/     |_|

configure(){
  plain ""
  plain "#########################################"
  plain "Set module SIG level"
  read -rp "`echo $' > 1.SHA1\n > 2.SHA224\n > 3.SHA256\n > 4.SHA384\n > 5.SHA512\n > Default (SHA512)\nchoice[1-5]: '`" _sig;
  if [[ $_sig = "1" ]]; then
    msg2 "Set SIG level to SHA1"
    scripts/config --undefine MODULE_SIG_FORCE
    scripts/config --disable MODULE_SIG_FORCE
    scripts/config --enable CONFIG_MODULE_SIG
    scripts/config --enable CONFIG_MODULE_SIG_ALL
    scripts/config --disable CONFIG_MODULE_SIG_SHA224
    scripts/config --disable CONFIG_MODULE_SIG_SHA256
    scripts/config --disable CONFIG_MODULE_SIG_SHA384
    scripts/config --disable CONFIG_MODULE_SIG_SHA512
    scripts/config --enable CONFIG_MODULE_SIG_SHA1
    scripts/config  --set-val CONFIG_MODULE_SIG_HASH "sha1"
  elif [[ $_sig = "2" ]]; then
    msg2 "Set SIG level to SHA224"
    scripts/config --undefine MODULE_SIG_FORCE
    scripts/config --disable MODULE_SIG_FORCE
    scripts/config --enable CONFIG_MODULE_SIG
    scripts/config --enable CONFIG_MODULE_SIG_ALL
    scripts/config --disable CONFIG_MODULE_SIG_SHA1
    scripts/config --disable CONFIG_MODULE_SIG_SHA256
    scripts/config --disable CONFIG_MODULE_SIG_SHA384
    scripts/config --disable CONFIG_MODULE_SIG_SHA512
    scripts/config --enable CONFIG_MODULE_SIG_SHA224
    scripts/config  --set-val CONFIG_MODULE_SIG_HASH "sha224"
  elif [[ $_sig = "3" ]]; then
    msg2 "Set SIG level to SHA256"
    scripts/config --undefine MODULE_SIG_FORCE
    scripts/config --disable MODULE_SIG_FORCE
    scripts/config --enable CONFIG_MODULE_SIG
    scripts/config --enable CONFIG_MODULE_SIG_ALL
    scripts/config --disable CONFIG_MODULE_SIG_SHA1
    scripts/config --disable CONFIG_MODULE_SIG_SHA224
    scripts/config --disable CONFIG_MODULE_SIG_SHA384
    scripts/config --disable CONFIG_MODULE_SIG_SHA512
    scripts/config --enable CONFIG_MODULE_SIG_SHA256
    scripts/config  --set-val CONFIG_MODULE_SIG_HASH "sha256"
  elif [[ $_sig = "4" ]]; then
    msg2 "Set SIG level to SHA384"
    scripts/config --undefine MODULE_SIG_FORCE
    scripts/config --disable MODULE_SIG_FORCE
    scripts/config --enable CONFIG_MODULE_SIG
    scripts/config --enable CONFIG_MODULE_SIG_ALL
    scripts/config --disable CONFIG_MODULE_SIG_SHA1
    scripts/config --disable CONFIG_MODULE_SIG_SHA224
    scripts/config --disable CONFIG_MODULE_SIG_SHA256
    scripts/config --disable CONFIG_MODULE_SIG_SHA512
    scripts/config --enable CONFIG_MODULE_SIG_SHA384
    scripts/config  --set-val CONFIG_MODULE_SIG_HASH "sha384"
  elif [[ $_sig = "5" ]]; then
    msg2 "Set SIG level to SHA512"
    scripts/config --undefine MODULE_SIG_FORCE
    scripts/config --disable MODULE_SIG_FORCE
    scripts/config --enable CONFIG_MODULE_SIG
    scripts/config --enable CONFIG_MODULE_SIG_ALL
    scripts/config --disable CONFIG_MODULE_SIG_SHA1
    scripts/config --disable CONFIG_MODULE_SIG_SHA224
    scripts/config --disable CONFIG_MODULE_SIG_SHA256
    scripts/config --disable CONFIG_MODULE_SIG_SHA384
    scripts/config --enable CONFIG_MODULE_SIG_SHA512
    scripts/config  --set-val CONFIG_MODULE_SIG_HASH "sha512"
  else
    msg2 "Set SIG level to SHA512"
    scripts/config --undefine MODULE_SIG_FORCE
    scripts/config --disable MODULE_SIG_FORCE
    scripts/config --enable CONFIG_MODULE_SIG
    scripts/config --enable CONFIG_MODULE_SIG_ALL
    scripts/config --disable CONFIG_MODULE_SIG_SHA1
    scripts/config --disable CONFIG_MODULE_SIG_SHA224
    scripts/config --disable CONFIG_MODULE_SIG_SHA256
    scripts/config --disable CONFIG_MODULE_SIG_SHA384
    scripts/config --enable CONFIG_MODULE_SIG_SHA512
    scripts/config  --set-val CONFIG_MODULE_SIG_HASH "sha512"
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Set module compression"
  read -rp "`echo $' > 1.None\n > 2.GZIP\n > 3.XZ\n > 4.ZSTD\n > Default (ZSTD)\nchoice[1-4]: '`" _compression;
  if [[ $_compression = "1" ]]; then
    msg2 "Set module compression to NONE"
    scripts/config --disable CONFIG_MODULE_COMPRESS_GZIP
    scripts/config --disable CONFIG_MODULE_COMPRESS_XZ
    scripts/config --disable CONFIG_MODULE_COMPRESS_ZSTD
    scripts/config --enable CONFIG_MODULE_COMPRESS_NONE
  elif [[ $_compression = "2" ]]; then
    msg2 "Set module compression to GZIP"
    scripts/config --disable CONFIG_MODULE_COMPRESS_NONE
    scripts/config --disable CONFIG_MODULE_COMPRESS_XZ
    scripts/config --disable CONFIG_MODULE_COMPRESS_ZSTD
    scripts/config --enable CONFIG_MODULE_COMPRESS_GZIP
  elif [[ $_compression = "3" ]]; then
    msg2 "Set module compression to XZ"
    scripts/config --disable CONFIG_MODULE_COMPRESS_NONE
    scripts/config --disable CONFIG_MODULE_COMPRESS_ZSTD
    scripts/config --disable CONFIG_MODULE_COMPRESS_GZIP
    scripts/config --enable CONFIG_MODULE_COMPRESS_XZ
  elif [[ $_compression = "4" ]]; then
    msg2 "Set module compression to ZSTD"
    scripts/config --disable CONFIG_MODULE_COMPRESS_NONE
    scripts/config --disable CONFIG_MODULE_COMPRESS_GZIP
    scripts/config --disable CONFIG_MODULE_COMPRESS_XZ
    scripts/config --enable CONFIG_MODULE_COMPRESS_ZSTD
  else
    msg2 "Set module compression to ZSTD"
    scripts/config --disable CONFIG_MODULE_COMPRESS_NONE
    scripts/config --disable CONFIG_MODULE_COMPRESS_GZIP
    scripts/config --disable CONFIG_MODULE_COMPRESS_XZ
    scripts/config --enable CONFIG_MODULE_COMPRESS_ZSTD
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Enable/disable CONFIG_STACK_VALIDATION"
  plain "Gives better stack traces. Also is enabled in all official kernel"
  plain "packages by Archlinux team"
  read -rp "`echo $' > 1.Enable\n > 2.Disable\n > Default (Enable)\nchoice[1-2]: '`" _config_stack;
  if [[ $_config_stack = "1" ]]; then
    msg2 "Enable CONFIG_STACK_VALIDATION"
    scripts/config --enable CONFIG_STACK_VALIDATION
  elif [[ $_config_stack = "2" ]]; then
    msg2 "Disable CONFIG_STACK_VALIDATION"
    scripts/config --disable CONFIG_STACK_VALIDATION
  else
    msg2 "Enable CONFIG_STACK_VALIDATION"
    scripts/config --enable CONFIG_STACK_VALIDATION
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Enable/disable IKCONFIG"
  plain "Enable access to the kernel configuration file through /proc/config.gz"
  read -rp "`echo $' > 1.Enable\n > 2.Disable\n > Default (Enable)\nchoice[1-2]: '`" _ikconfig;
  if [[ $_ikconfig = "1" ]]; then
    msg2 "Enable IKCONFIG"
    scripts/config --enable CONFIG_IKCONFIG
    scripts/config --enable CONFIG_IKCONFIG_PROC
  elif [[ $_ikconfig = "2" ]]; then
    msg2 "Disable IKCONFIG"
    scripts/config --disable CONFIG_IKCONFIG
    scripts/config --disable CONFIG_IKCONFIG_PROC
  else
    msg2 "Enable IKCONFIG"
    scripts/config --enable CONFIG_IKCONFIG
    scripts/config --enable CONFIG_IKCONFIG_PROC
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Enable/disable NUMA"
  plain "Better option is to disable NUMA since most users do not have multiple"
  plain "processors... Breaks CUDA/NvEnc..."
  read -rp "`echo $' > 1.Enable\n > 2.Disable (possibly increase performance)\n > Default (Disable)\nchoice[1-2]: '`" _numa;
  if [[ $_numa = "1" ]]; then
    msg2 "Enable NUMA"
    scripts/config --enable CONFIG_NUMA
    scripts/config --enable CONFIG_NUMA
    scripts/config --enable CONFIG_AMD_NUMA
    scripts/config --enable CONFIG_X86_64_ACPI_NUMA
    scripts/config --enable CONFIG_NODES_SPAN_OTHER_NODES
    scripts/config --enable CONFIG_NUMA_EMU
    scripts/config --enable CONFIG_NEED_MULTIPLE_NODES
    scripts/config --enable CONFIG_USE_PERCPU_NUMA_NODE_ID
    scripts/config --enable CONFIG_ACPI_NUMA
    scripts/config --enable CONFIG_ARCH_SUPPORTS_NUMA_BALANCING
    scripts/config --set-val CONFIG_NODES_SHIFT 5
    scripts/config --enable CONFIG_NEED_MULTIPLE_NODES
  elif [[ $_numa = "2" ]]; then
    msg2 "Disable NUMA"
    scripts/config --disable CONFIG_NUMA
    scripts/config --disable CONFIG_AMD_NUMA
    scripts/config --disable CONFIG_X86_64_ACPI_NUMA
    scripts/config --disable CONFIG_NODES_SPAN_OTHER_NODES
    scripts/config --disable CONFIG_NUMA_EMU
    scripts/config --disable CONFIG_NEED_MULTIPLE_NODES
    scripts/config --disable CONFIG_USE_PERCPU_NUMA_NODE_ID
    scripts/config --disable CONFIG_ACPI_NUMA
    scripts/config --disable CONFIG_ARCH_SUPPORTS_NUMA_BALANCING
    scripts/config --disable CONFIG_NODES_SHIFT
    scripts/config --undefine CONFIG_NODES_SHIFT
    scripts/config --disable CONFIG_NEED_MULTIPLE_NODES
  else
    msg2 "Disable NUMA"
    scripts/config --disable CONFIG_NUMA
    scripts/config --disable CONFIG_AMD_NUMA
    scripts/config --disable CONFIG_X86_64_ACPI_NUMA
    scripts/config --disable CONFIG_NODES_SPAN_OTHER_NODES
    scripts/config --disable CONFIG_NUMA_EMU
    scripts/config --disable CONFIG_NEED_MULTIPLE_NODES
    scripts/config --disable CONFIG_USE_PERCPU_NUMA_NODE_ID
    scripts/config --disable CONFIG_ACPI_NUMA
    scripts/config --disable CONFIG_ARCH_SUPPORTS_NUMA_BALANCING
    scripts/config --disable CONFIG_NODES_SHIFT
    scripts/config --undefine CONFIG_NODES_SHIFT
    scripts/config --disable CONFIG_NEED_MULTIPLE_NODES
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Enable/disable FUNCTION_TRACER/GRAPH_TRACER"
  plain "Limits debugging and analyzing of the kernel"
  read -rp "`echo $' > 1.Enable\n > 2.Disable (possibly increase performance)\n > Default (Disable)\nchoice[1-2]: '`" _tracer;
  if [[ $_tracer = "1" ]]; then
    msg2 "Enable FUNCTION_TRACER/GRAPH_TRACER"
    scripts/config --enable CONFIG_FUNCTION_TRACER
    scripts/config --enable CONFIG_STACK_TRACER
  elif [[ $_tracer = "2" ]]; then
    msg2 "Disable FUNCTION_TRACER/GRAPH_TRACER"
    scripts/config --disable CONFIG_FUNCTION_TRACER
    scripts/config --disable CONFIG_STACK_TRACER
  else
    msg2 "Disable FUNCTION_TRACER/GRAPH_TRACER"
    scripts/config --disable CONFIG_FUNCTION_TRACER
    scripts/config --disable CONFIG_STACK_TRACER
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Enable/Disable CONFIG_USER_NS_UNPRIVILEGED"
  plain ""
  plain "Allow unprivileged users to create namespaces"
  plain "When disabled, unprivileged users will not be able to create"
  plain "new namespaces. Allowing users to create their own namespaces"
  plain "has been part of several recent local privilege escalation"
  plain "exploits, so if you need user namespaces but are"
  plain "paranoid^Wsecurity-conscious you want to disable this."
  plain "This setting can be overridden at runtime via the"
  plain "kernel.unprivileged_userns_clone sysctl."
  plain ""
  read -rp "`echo $' > 1.Enable\n > 2.Disable\n > Default (Enable)\nchoice[1-2]: '`" _ns;
  if [[ $_ns = "1" ]]; then
    msg2 "Enable CONFIG_USER_NS_UNPRIVILEGED"
    scripts/config --disable CONFIG_USER_NS_UNPRIVILEGED
  elif [[ $_ns = "2" ]]; then
    msg2 "Disable CONFIG_USER_NS_UNPRIVILEGED"
    scripts/config --disable CONFIG_USER_NS_UNPRIVILEGED
  else
    msg2 "Enable CONFIG_USER_NS_UNPRIVILEGED"
    scripts/config --enable CONFIG_USER_NS_UNPRIVILEGED
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Set CPU Frequency scaling"
  plain ""
  plain "performance : When attached to a policy object, this governor causes"
  plain "the highest frequency, within the scaling_max_freq policy limit, to be"
  plain "requested for that policy. The request is made once at that time the"
  plain "governor for the policy is set to performance and whenever the"
  plain "scaling_max_freq or scaling_min_freq policy limits change after that."
  plain ""
  plain "powersave : When attached to a policy object, this governor causes the"
  plain "lowest frequency, within the scaling_min_freq policy limit, to be"
  plain "requested for that policy.The request is made once at that time the"
  plain "governor for the policy is set to powersave and whenever the"
  plain "scaling_max_freq or scaling_min_freq policy limits change after that."
  plain ""
  plain "userspace : This governor does not do anything by itself. Instead, it"
  plain "allows user space to set the CPU frequency for the policy it is"
  plain "attached to by writing to the scaling_setspeed attribute of that policy."
  plain ""
  plain "schedutil : This governor uses CPU utilization data available from the"
  plain "CPU scheduler. It generally is regarded as a part of th CPU scheduler,"
  plain "so it can access the scheduler’s internal data structures directly."
  plain ""
  plain "ondemand : This governor uses CPU load as a CPU frequency selection"
  plain "metric. In order to estimate the current CPU load, it measures the time"
  plain "elapsed between consecutive invocations of its worker routine and computes"
  plain "the fraction of that time in which the given CPU was not idle. The"
  plain "ratio of the non-idle (active) time to the total CPU time is"
  plain "taken as an estimate of the load."
  plain ""
  plain "conservative : This governor uses CPU load as a CPU frequency selection"
  plain "metric. It estimates the CPU load in the same way as the"
  plain "ondemand governor described above, but the CPU frequency selection"
  plain "algorithm implemented by it is different."
  plain ""
  plain "Full documentation at : https://www.kernel.org/doc/html/v4.14/admin-guide/pm/cpufreq.html"
  plain ""
  read -rp "`echo $' > 1.Powersave\n > 2.Userspace\n > 3.Ondemand\n > 4.Conservative\n > 5.Schedutil\n > 6.Performance\n > 7.Default(zen-kernel)\n > Default (Performance)\nchoice[1-7]: '`" _cpu_freq;
  if [[ $_cpu_freq = "1" ]]; then
    msg2 "Set CPU Frequency scaling CONFIG_CPU_FREQ_DEFAULT_GOV/CONFIG_CPU_FREQ_GOV for powersave"
    scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_POWERSAVE
    scripts/config --enable CONFIG_CPU_FREQ_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_CONSERVATIVE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_CONSERVATIVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
    scripts/config --disable CONFIG_CPU_FREQ_GOV_SCHEDUTIL
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_PERFORMANCE
  elif [[ $_cpu_freq = "2" ]]; then
    msg2 "Set CPU Frequency scaling CONFIG_CPU_FREQ_DEFAULT_GOV/CONFIG_CPU_FREQ_GOV for userspace"
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_POWERSAVE
    scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE
    scripts/config --enable CONFIG_CPU_FREQ_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_CONSERVATIVE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_CONSERVATIVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
    scripts/config --disable CONFIG_CPU_FREQ_GOV_SCHEDUTIL
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_PERFORMANCE
  elif [[ $_cpu_freq = "3" ]]; then
    msg2 "Set CPU Frequency scaling CONFIG_CPU_FREQ_DEFAULT_GOV/CONFIG_CPU_FREQ_GOV for ondemand"
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_USERSPACE
    scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND
    scripts/config --enable CONFIG_CPU_FREQ_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_CONSERVATIVE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_CONSERVATIVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
    scripts/config --disable CONFIG_CPU_FREQ_GOV_SCHEDUTIL
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_PERFORMANCE
  elif [[ $_cpu_freq = "4" ]]; then
    msg2 "Set CPU Frequency scaling CONFIG_CPU_FREQ_DEFAULT_GOV/CONFIG_CPU_FREQ_GOV for conservative"
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_GOV_ONDEMAND
    scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_CONSERVATIVE
    scripts/config --enable CONFIG_CPU_FREQ_GOV_CONSERVATIVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
    scripts/config --disable CONFIG_CPU_FREQ_GOV_SCHEDUTIL
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_PERFORMANCE
  elif [[ $_cpu_freq = "5" ]]; then
    msg2 "Set CPU Frequency scaling CONFIG_CPU_FREQ_DEFAULT_GOV/CONFIG_CPU_FREQ_GOV for schedutil"
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_CONSERVATIVE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_CONSERVATIVE
    scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
    scripts/config --enable CONFIG_CPU_FREQ_GOV_SCHEDUTIL
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_PERFORMANCE
  elif [[ $_cpu_freq = "6" ]]; then
    msg2 "Set CPU Frequency scaling CONFIG_CPU_FREQ_DEFAULT_GOV/CONFIG_CPU_FREQ_GOV for performance"
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_CONSERVATIVE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_CONSERVATIVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
    scripts/config --disable CONFIG_CPU_FREQ_GOV_SCHEDUTIL
    scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
    scripts/config --enable CONFIG_CPU_FREQ_GOV_PERFORMANCE
  elif [[ $_cpu_freq = "7" ]]; then
    msg2 "Set CPU Frequency scaling default from zen kernel"
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_POWERSAVE
    scripts/config --enable CONFIG_CPU_FREQ_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE
    scripts/config --enable CONFIG_CPU_FREQ_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND
    scripts/config --enable CONFIG_CPU_FREQ_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_CONSERVATIVE
    scripts/config --enable CONFIG_CPU_FREQ_GOV_CONSERVATIVE
    scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
    scripts/config --enable CONFIG_CPU_FREQ_GOV_SCHEDUTIL
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
    scripts/config --enable CONFIG_CPU_FREQ_GOV_PERFORMANCE
  else
    msg2 "Set CPU Frequency scaling CONFIG_CPU_FREQ_DEFAULT_GOV/CONFIG_CPU_FREQ_GOV for performance"
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_POWERSAVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_USERSPACE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_GOV_ONDEMAND
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_CONSERVATIVE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_CONSERVATIVE
    scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
    scripts/config --disable CONFIG_CPU_FREQ_GOV_SCHEDUTIL
    scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
    scripts/config --enable CONFIG_CPU_FREQ_GOV_PERFORMANCE
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Set CPU DEVFREQ Governor"
  plain ""
  plain "Simple Ondemand : Chooses frequency based on the recent load on the"
  plain "device. Works similar as ONDEMAND governor of CPUFREQ does. A device"
  plain "with Simple-Ondemand should be able to provide busy/total counter"
  plain "values that imply the usage rate. A device may provide tuned values"
  plain "to the governor with data field at devfreq_add_device()."
  plain ""
  plain "Performance : Sets the frequency at the maximum available frequency."
  plain "This governor always returns UINT_MAX as frequency so that the DEVFREQ"
  plain "framework returns the highest frequency available at any time."
  plain ""
  plain "Powersave : Sets the frequency at the minimum available frequency."
  plain "This governor always returns 0 as frequency so that the DEVFREQ"
  plain "framework returns the lowest frequency available at any time."
  plain ""
  plain "Userspace : Sets the frequency at the user specified one. This"
  plain "governor returns the user configured frequency if there has been an"
  plain "input to /sys/devices/.../power/devfreq_set_freq. Otherwise, the"
  plain "governor does not change the frequency given at the initialization."
  plain ""
  plain "Passive : Sets the frequency based on the frequency of its parent"
  plain "devfreq device. This governor does not change the frequency by itself"
  plain "through sysfs entries. The passive governor recommends that devfreq"
  plain "device uses the OPP table to get the frequency/voltage."
  plain ""
  read -rp "`echo $' > 1.Simple Ondemand\n > 2.Powersave\n > 3.Userspace\n > 4.Passive\n > 5.Performance\n > 6.Default(zen kernel : all)\n > Default (Performance)\nchoice[1-6]: '`" _devfreq
  if [[ $_devfreq = "1" ]]; then
    msg2 "Set CPU DEVFREQ GOV CONFIG_DEVFREQ_GOV for simple ondemand"
    scripts/config --enable CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
    scripts/config --disable CONFIG_DEVFREQ_GOV_POWERSAVE
    scripts/config --disable CONFIG_DEVFREQ_GOV_USERSPACE
    scripts/config --disable CONFIG_DEVFREQ_GOV_PASSIVE
    scripts/config --disable CONFIG_DEVFREQ_GOV_PERFORMANCE
  elif [[ $_devfreq = "2" ]]; then
    msg2 "Set CPU DEVFREQ GOV CONFIG_DEVFREQ_GOV for powersave"
    scripts/config --disable CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
    scripts/config --undefine CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
    scripts/config --enable CONFIG_DEVFREQ_GOV_POWERSAVE
    scripts/config --disable CONFIG_DEVFREQ_GOV_USERSPACE
    scripts/config --disable CONFIG_DEVFREQ_GOV_PASSIVE
    scripts/config --disable CONFIG_DEVFREQ_GOV_PERFORMANCE
  elif [[ $_devfreq = "3" ]]; then
    msg2 "Set CPU DEVFREQ GOV CONFIG_DEVFREQ_GOV for userspace"
    scripts/config --disable CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
    scripts/config --undefine CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
    scripts/config --disable CONFIG_DEVFREQ_GOV_POWERSAVE
    scripts/config --enable CONFIG_DEVFREQ_GOV_USERSPACE
    scripts/config --disable CONFIG_DEVFREQ_GOV_PASSIVE
    scripts/config --disable CONFIG_DEVFREQ_GOV_PERFORMANCE
  elif [[ $_devfreq = "4" ]]; then
    msg2 "Set CPU DEVFREQ GOV CONFIG_DEVFREQ_GOV for passive"
    scripts/config --disable CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
    scripts/config --undefine CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
    scripts/config --disable CONFIG_DEVFREQ_GOV_POWERSAVE
    scripts/config --disable CONFIG_DEVFREQ_GOV_USERSPACE
    scripts/config --enable CONFIG_DEVFREQ_GOV_PASSIVE
    scripts/config --disable CONFIG_DEVFREQ_GOV_PERFORMANCE
  elif [[ $_devfreq = "5" ]]; then
    msg2 "Set CPU DEVFREQ GOV CONFIG_DEVFREQ_GOV for performance"
    scripts/config --disable CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
    scripts/config --undefine CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
    scripts/config --disable CONFIG_DEVFREQ_GOV_POWERSAVE
    scripts/config --disable CONFIG_DEVFREQ_GOV_USERSPACE
    scripts/config --disable CONFIG_DEVFREQ_GOV_PASSIVE
    scripts/config --enable CONFIG_DEVFREQ_GOV_PERFORMANCE
  elif [[ $_devfreq = "6" ]]; then
    msg2 "Set CPU DEVFREQ GOV CONFIG_DEVFREQ_GOV default from zen kernel"
    scripts/config --enable CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
    scripts/config --enable CONFIG_DEVFREQ_GOV_POWERSAVE
    scripts/config --enable CONFIG_DEVFREQ_GOV_USERSPACE
    scripts/config --enable CONFIG_DEVFREQ_GOV_PASSIVE
    scripts/config --enable CONFIG_DEVFREQ_GOV_PERFORMANCE
  else
    msg2 "Set CPU DEVFREQ GOV CONFIG_DEVFREQ_GOV for performance"
    scripts/config --disable CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
    scripts/config --undefine CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
    scripts/config --disable CONFIG_DEVFREQ_GOV_POWERSAVE
    scripts/config --disable CONFIG_DEVFREQ_GOV_USERSPACE
    scripts/config --disable CONFIG_DEVFREQ_GOV_PASSIVE
    scripts/config --enable CONFIG_DEVFREQ_GOV_PERFORMANCE
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Set PCIEASPM driver"
  plain ""
  plain "BIOS default : Use the BIOS defaults for PCI Express ASPM."
  plain ""
  plain "Powersave : Enable PCI Express ASPM L0s and L1 where possible, even if"
  plain "the BIOS did not."
  plain ""
  plain "Power Supersave : Same as PCIEASPM_POWERSAVE, except it also enables L1"
  plain "substates where possible. This would result in higher power savings while"
  plain "staying in L1 where the components support it."
  plain ""
  plain "Performance : Disable PCI Express ASPM L0s and L1, even if the BIOS enabled them."
  plain ""
  read -rp "`echo $' > 1.Default\n > 2.Powersave\n > 3.Supersave\n > 4.Performance\n > Default (Performance)\nchoice[1-4]: '`" _pcieaspm
  if [[ $_pcieaspm = "1" ]]; then
    msg2 "Set PCIEASPM DRIVER to default"
    scripts/config --enable CONFIG_PCIEASPM
    scripts/config --enable CONFIG_PCIEASPM_DEFAULT
  elif [[ $_pcieaspm = "2" ]]; then
    msg2 "Set PCIEASPM DRIVER to powersave"
    scripts/config --enable CONFIG_PCIEASPM
    scripts/config --enable CONFIG_PCIEASPM_POWERSAVE
  elif [[ $_pcieaspm = "3" ]]; then
    msg2 "Set PCIEASPM DRIVER to supersave"
    scripts/config --enable CONFIG_PCIEASPM
    scripts/config --enable CONFIG_PCIEASPM_SUPERSAVE
  elif [[ $_pcieaspm = "4" ]]; then
    msg2 "Set PCIEASPM DRIVER to performance"
    scripts/config --enable CONFIG_PCIEASPM
    scripts/config --enable CONFIG_PCIEASPM_PERFORMANCE
  else
    msg2 "Set PCIEASPM DRIVER to performance"
    scripts/config --enable CONFIG_PCIEASPM
    scripts/config --enable CONFIG_PCIEASPM_PERFORMANCE
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Set PCIE_BUS driver"
  plain ""
  plain "Tune Off : Use the BIOS defaults; don't touch MPS at all.  This is the"
  plain "same as booting with 'pci=pcie_bus_tune_off'."
  plain ""
  plain "Default : Default choice; ensure that the MPS matches upstream bridge."
  plain ""
  plain "Safe : Use largest MPS that boot-time devices support. If you have a closed"
  plain "system with no possibility of adding new devices,"
  plain "this will use the largest MPS that's supported by all devices. This is"
  plain "the same as booting with 'pci=pcie_bus_safe'."
  plain ""
  plain "Performance : Use MPS and MRRS for best performance.  Ensure that a given"
  plain "device's MPS is no larger than its parent MPS, which allows us to"
  plain "keep all switches/bridges to the max MPS supported by their parent."
  plain "This is the same as booting with 'pci=pcie_bus_perf'."
  plain ""
  plain "Peer2peer : Set MPS = 128 for all devices.  MPS configuration effected by"
  plain "the other options could cause the MPS on one root port to"
  plain "be different than that of the MPS on another, which may cause hot-added"
  plain "devices or peer-to-peer DMA to fail.  Set MPS to the"
  plain "smallest possible value (128B) system-wide to avoid these issues. This is"
  plain "the same as booting with 'pci=pcie_bus_peer2peer'."
  plain ""
  read -rp "`echo $' > 1.Tune off\n > 2.Default\n > 3.Safe\n > 4.Performance\n > 5.Peer2peer\n > Default (Performance)\nchoice[1-5]: '`" _pcie_bus
  if [[ $_pcie_bus = "1" ]]; then
    msg2 "Set CONFIG_PCIE_BUS for tune off"
    scripts/config --enable CONFIG_PCIE_BUS_TUNE_OFF
  elif [[ $_pcie_bus = "2" ]] || [[ $_pcie_bus = "6" ]]; then
    msg2 "Set CONFIG_PCIE_BUS for default"
    scripts/config --enable CONFIG_PCIE_BUS_DEAULT
  elif [[ $_pcie_bus = "3" ]]; then
    msg2 "Set CONFIG_PCIE_BUS for safe"
    scripts/config --enable CONFIG_PCIE_BUS_SAFE
  elif [[ $_pcie_bus = "4" ]]; then
    msg2 "Set CONFIG_PCIE_BUS for performance"
    scripts/config --enable CONFIG_PCIE_BUS_PERFORMANCE
  elif [[ $_pcie_bus = "5" ]]; then
    msg2 "Set CONFIG_PCIE_BUS for peerpeer"
    scripts/config --enable CONFIG_PCIE_BUS_PEER2PEER
  else
    msg2 "Set CONFIG_PCIE_BUS for performance"
    scripts/config --enable CONFIG_PCIE_BUS_PERFORMANCE
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Set Optimization"
  plain ""
  plain "Optimize for performance (-O1) : Choosing this option will pass -O1"
  plain "to your compiler resulting in basal optimization, possibly speeding"
  plain "up compilation."
  plain ""
  plain "Optimize for performance (-O2) : This is the default optimization level"
  plain "for the kernel, building with the "-O2""
  plain "compiler flag for best performance and most helpful compile-time warnings."
  plain ""
  plain "Optimize more for performance (-O3) : Choosing this option will pass \"-O3"
  plain "to your compiler to optimize the kernel yet more for performance."
  plain ""
  plain "Optimize for size (-Os) : Choosing this option will pass "-Os" to your"
  plain "compiler resulting in a smaller kernel."
  plain ""
  read -rp "`echo $' > 1.Optimize for performance (-O1)\n > 2.Optimize for performance(-O2)\n > 3.Optimize for performance(-O3)\n > 4.Optimize for size(-Os)\n > Default (Optimize for performance (-O3))\nchoice[1-4]: '`" _optimize
  if [[ "$_optimize" = "1" ]]; then
    msg2 "Enable CC_OPTIMIZE_BASAL"
    scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE
    scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3
    scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_SIZE
    scripts/config --enable CONFIG_CC_OPTIMIZE_BASAL
  elif [[ "$_optimize" = "2" ]]; then
    msg2 "Enable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE"
    scripts/config --disable CONFIG_CC_OPTIMIZE_BASAL
    scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_SIZE
    scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3
    scripts/config --enable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE
  elif [[ "$_optimize" = "3" ]]; then
    msg2 "Enable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3"
    scripts/config --disable CONFIG_CC_OPTIMIZE_BASAL
    scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE
    scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_SIZE
    scripts/config --enable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3
  elif [[ "$_optimize" = "4" ]]; then
    msg2 "Enable CONFIG_CC_OPTIMIZE_FOR_SIZE"
    scripts/config --disable CONFIG_CC_OPTIMIZE_BASAL
    scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE
    scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3
    scripts/config --enable CONFIG_CC_OPTIMIZE_FOR_SIZE
  else
    msg2 "Enable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3"
    scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE
    scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_SIZE
    scripts/config --enable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Set timer frequency"
  plain ""
  plain "100 HZ : 100 Hz is a typical choice for servers, SMP and NUMA systems"
  plain "with lots of processors that may show reduced performance if"
  plain "too many timer interrupts are occurring."
  plain ""
  plain "250 HZ : 250 Hz is a good compromise choice allowing server performance"
  plain "while also showing good interactive responsiveness even"
  plain "on SMP and NUMA systems. If you are going to be using NTSC video"
  plain "or multimedia, selected 300Hz instead."
  plain ""
  plain "300 HZ : 300 Hz is a good compromise choice allowing server performance"
  plain "while also showing good interactive responsiveness even"
  plain "on SMP and NUMA systems and exactly dividing by both PAL and"
  plain "NTSC frame rates for video and multimedia work."
  plain ""
  plain "500 HZ : 500 Hz is a balanced timer frequency. Provides fast interactivity"
  plain "on desktops with good smoothness without increasing CPU power"
  plain "consumption and sacrificing the battery life on laptops."
  plain ""
  plain "1000 HZ : 1000 Hz is the preferred choice for desktop systems and other"
  plain "systems requiring fast interactive responses to events."
  plain ""
  read -rp "`echo $' > 1.100\n > 2.250\n > 3.300\n > 4.500\n > 5.1000\n > Default (1000)\nchoice[1-6]: '`" _timer_freq
  if [[ "$_timer_freq" = "1" ]]; then
    msg2 "Set timer frequency to 100HZ"
    scripts/config --enable CONFIG_HZ_100
    scripts/config --set-val CONFIG_HZ 100
  elif [[ "$_timer_freq" = "2" ]]; then
    msg2 "Set timer frequency to 250HZ"
    scripts/config --enable CONFIG_HZ_250
    scripts/config --set-val CONFIG_HZ 250
  elif [[ "$_timer_freq" = "3" ]]; then
    msg2 "Set timer frequency to 300HZ"
    scripts/config --enable CONFIG_HZ_300
    scripts/config --set-val CONFIG_HZ 300
  elif [[ "$_timer_freq" = "4" ]]; then
    msg2 "Set timer frequency to 500HZ"
    scripts/config --enable CONFIG_HZ_500
    scripts/config --set-val CONFIG_HZ 500
  elif [[ "$_timer_freq" = "5" ]]; then
    msg2 "Set timer frequency to 1000HZ"
    scripts/config --enable CONFIG_HZ_1000
    scripts/config --set-val CONFIG_HZ 1000
  else
    msg2 "Set timer frequency to 1000HZ"
    scripts/config --enable CONFIG_HZ_1000
    scripts/config --set-val CONFIG_HZ 1000
  fi

  sleep 2s

  if [[ $_cpu_sched = "1" ]] || [[ $_cpu_sched = "2" ]]; then
    plain ""
    plain "#########################################"
    plain "Enable 2000Hz timer? Only for CacULE patch"
    read -rp "`echo $' > 1.Yes\n > 2.No\n > Default (Yes)\nchoice[1-2]: '`" _cacule_timer
    if [[ $_cacule_timer = "1" ]];then
      msg2 "Enable 2000Hz timer"
      scripts/config --enable CONFIG_HZ_2000
      scripts/config --set-val CONFIG_HZ 2000
    elif [[ $_cacule_timer = "2" ]];then
      msg2 "Keep current timer"
    else
      msg2 "Enable 2000Hz timer"
      scripts/config --enable CONFIG_HZ_2000
      scripts/config --set-val CONFIG_HZ 2000
    fi

    sleep 2s
  fi

  plain ""
  plain "#########################################"
  plain "Set Preemption Model"
  plain ""
  plain "PREEMPT_NONE (No Forced Preemption (Server)) :"
  plain ""
  plain "This is the traditional Linux preemption model, geared towards"
  plain "throughput. It will still provide good latencies most of the"
  plain "time, but there are no guarantees and occasional longer delays"
  plain "are possible."
  plain "Select this option if you are building a kernel for a server or"
  plain "scientific/computation system, or if you want to maximize the"
  plain "raw processing power of the kernel, irrespective of scheduling"
  plain "latencies."
  plain ""
  plain "PREEMPT_VOLUNTARY (Voluntary Kernel Preemption (Desktop)) :"
  plain ""
  plain "This option reduces the latency of the kernel by adding more"
  plain "(explicit preemption points) to the kernel code. These new"
  plain "preemption points have been selected to reduce the maximum"
  plain "latency of rescheduling, providing faster application reactions,"
  plain "at the cost of slightly lower throughput."
  plain "This allows reaction to interactive events by allowing a"
  plain "low priority process to voluntarily preempt itself even if it"
  plain "is in kernel mode executing a system call. This allows"
  plain "applications to run more 'smoothly' even when the system is"
  plain "under load."
  plain "Select this if you are building a kernel for a desktop system."
  plain ""
  plain "PREEMPT (Preemptible Kernel (Low-Latency Desktop)) :"
  plain ""
  plain "This option reduces the latency of the kernel by making"
  plain "all kernel code (that is not executing in a critical section)"
  plain "preemptible.  This allows reaction to interactive events by"
  plain "permitting a low priority process to be preempted involuntarily"
  plain "even if it is in kernel mode executing a system call and would"
  plain "otherwise not be about to reach a natural preemption point."
  plain "This allows applications to run more 'smoothly' even when the"
  plain "system is under load, at the cost of slightly lower throughput"
  plain "and a slight runtime overhead to kernel code."
  plain "Select this if you are building a kernel for a desktop or"
  plain "embedded system with latency requirements in the milliseconds"
  plain "range."
  plain ""
  read -rp "`echo $' > 1.PREEMPT_NONE\n > 2.PREEMPT_VOLUNTARY\n > 3.PREEMPT\n > Default (PREEMPT)\nchoice[1-3]: '`" _preempt
  if [[ "$_preempt" = "1" ]]; then
    msg2 "Enable PREEMPT_NONE"
    scripts/config --enable CONFIG_PREEMPT_NONE
    scripts/config --disable CONFIG_PREEMPT_VOLUNTARY
    scripts/config --disable CONFIG_PREEMPT
    scripts/config --enable CONFIG_PREEMPT_COUNT
    scripts/config --enable CONFIG_PREEMPTION
  elif [[ "$_preempt" = "2" ]]; then
    msg2 "Enable PREEMPT_VOLUNTARY"
    scripts/config --disable CONFIG_PREEMPT_NONE
    scripts/config --enable CONFIG_PREEMPT_VOLUNTARY
    scripts/config --disable CONFIG_PREEMPT
    scripts/config --enable CONFIG_PREEMPT_COUNT
    scripts/config --enable CONFIG_PREEMPTION
  elif [[ "$_preempt" = "3" ]]; then
    msg2 "Enable PREEMPT"
    scripts/config --disable CONFIG_PREEMPT_NONE
    scripts/config --disable CONFIG_PREEMPT_VOLUNTARY
    scripts/config --enable CONFIG_PREEMPT
    scripts/config --enable CONFIG_PREEMPT_COUNT
    scripts/config --enable CONFIG_PREEMPTION
  else
    msg2 "Enable PREEMPT"
    scripts/config --disable CONFIG_PREEMPT_NONE
    scripts/config --disable CONFIG_PREEMPT_VOLUNTARY
    scripts/config --enable CONFIG_PREEMPT
    scripts/config --enable CONFIG_PREEMPT_COUNT
    scripts/config --enable CONFIG_PREEMPTION
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Enable/disable FORCE_IRQ_THREADING"
  plain ""
  plain "Make IRQ threading compulsory :"
  plain "Make IRQ threading mandatory for any IRQ handlers that support it"
  plain "instead of being optional and requiring the threadirqs kernel"
  plain "parameter. Instead they can be optionally disabled with the"
  plain "nothreadirqs kernel parameter."
  plain ""
  plain "Enabling this may make some architectures not boot with runqueue"
  plain "sharing and MuQSS."
  plain ""
  plain "Enable if you are building for a desktop or low latency system,"
  plain "otherwise say N."
  plain ""
  read -rp "`echo $' > 1.Enable\n > 2.Disable\n > Default (Enable)\nchoice[1-2]: '`" _force_irq
  if [[ "$_force_irq" = "1" ]]; then
    msg2 "Enable FORCE_IRQ_THREADING"
    scripts/config --enable CONFIG_FORCE_IRQ_THREADING
  elif [[ "$_force_irq" = "2" ]]; then
    msg2 "Disable FORCE_IRQ_THREADING"
    scripts/config --disable CONFIG_FORCE_IRQ_THREADING
  else
    msg2 "Enable FORCE_IRQ_THREADING"
    scripts/config --enable CONFIG_FORCE_IRQ_THREADING
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Use CattaRappa mode (Tickless/Dynticks) ?"
  plain "Can give higher performances in many cases but lower consistency on"
  plain "some hardware."
  plain "Just tickless idle can perform better with some platforms (mostly AMD)"
  plain "or CPU schedulers (mostly MuQSS)."
  plain ""
  read -rp "`echo $' > 1.Periodic ticks\n > 2.Full tickless\n > 3.Tickless idle\n > Default (Full tickless)\nchoice[1-3]: '`" _tick
  if [[ "$_tick" = "1" ]]; then
    msg2 "Set to periodic ticks"
    scripts/config --enable CONFIG_HZ_PERIODIC
    scripts/config --disable CONFIG_NO_HZ_IDLE
    scripts/config --disable CONFIG_NO_HZ_FULL
    scripts/config --disable CONFIG_NO_HZ
    scripts/config --disable CONFIG_NO_HZ_COMMON
  elif [[ "$_tick" = "2" ]]; then
    msg2 "Set to full tickless"
    scripts/config --disable CONFIG_HZ_PERIODIC
    scripts/config --disable CONFIG_NO_HZ_IDLE
    scripts/config --enable CONFIG_NO_HZ_FULL
    scripts/config --enable CONFIG_NO_HZ
    scripts/config --enable CONFIG_NO_HZ_COMMON
    #scripts/config --enable CONFIG_CONTEXT_TRACKING
    #scripts/config --disable CONFIG_CONTEXT_TRACKING_FORCE
  elif [[ "$_tick" = "3" ]]; then
    msg2 "Set to tickless idle"
    scripts/config --disable CONFIG_HZ_PERIODIC
    scripts/config --enable CONFIG_NO_HZ_IDLE
    scripts/config --disable CONFIG_NO_HZ_FULL
    scripts/config --enable CONFIG_NO_HZ
    scripts/config --enable CONFIG_NO_HZ_COMMON
  else
    msg2 "Set to full tickless"
    scripts/config --disable CONFIG_HZ_PERIODIC
    scripts/config --disable CONFIG_NO_HZ_IDLE
    scripts/config --enable CONFIG_NO_HZ_FULL
    scripts/config --enable CONFIG_NO_HZ
    scripts/config --enable CONFIG_NO_HZ_COMMON
    #scripts/config --enable CONFIG_CONTEXT_TRACKING
    #scripts/config --disable CONFIG_CONTEXT_TRACKING_FORCE
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Enable/disable tristate V4L2 loopback device"
  read -rp "`echo $' > 1.Enable\n > 2.Disable\n > Default (Enable)\nchoice[1-2]: '`" _loopback
  if [[ "$_loopback" = "1" ]]; then
    msg2 "Enable tristate V4L2 loopback device"
    scripts/config --module CONFIG_V4L2_LOOPBACK
  elif [[ "$_loopback" = "2" ]]; then
    msg2 "Disable tristate V4L2 loopback device"
    scripts/config --disable CONFIG_V4L2_LOOPBACK
  else
    msg2 "Enable tristate V4L2 loopback device"
    scripts/config --module CONFIG_V4L2_LOOPBACK
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Enable/disable NTFS/NTFS3"
  plain ""
  plain "NTFS :"
  plain "Linux-NTFS comes with a number of user-space programs known as ntfsprogs."
  plain "These include mkntfs, a full-featured ntfs filesystem format utility,"
  plain "ntfsundelete used for recovering files that were unintentionally deleted"
  plain "from an NTFS volume and ntfsresize which is used to resize an NTFS partition."
  plain "See the web site for more information."
  plain "To mount an NTFS 1.2/3.x (Windows NT4/2000/XP/2003) volume, use the file"
  plain "system type 'ntfs'.  The driver currently supports read-only mode (with no"
  plain "fault-tolerance, encryption or journalling) and very limited, but safe, write"
  plain "support."
  plain "For fault tolerance and raid support (i.e. volume and stripe sets), you can"
  plain "use the kernel's Software RAID / MD driver.  See section Using Software RAID"
  plain "with NTFS for details."
  plain ""
  plain "NTFS3 :"
  plain "NTFS3 is fully functional NTFS Read-Write driver. The driver works with"
  plain "NTFS versions up to 3.1, normal/compressed/sparse files"
  plain "and journal replaying. File system type to use on mount is 'ntfs3'."
  plain "- This driver implements NTFS read/write support for normal, sparse and compressed files."
  plain "- Supports native journal replaying;"
  plain "- Supports extended attributes"
  plain "Predefined extended attributes:"
  plain "- 'system.ntfs_security' gets/sets security descriptor (SECURITY_DESCRIPTOR_RELATIVE)"
  plain "- 'system.ntfs_attrib' gets/sets ntfs file/dir attributes."
  plain "Note: applied to empty files, this allows to switch type between sparse(0x200), compressed(0x800) and normal;"
  plain "- Supports NFS export of mounted NTFS volumes."
  plain ""
  read -rp "`echo $' > 1.Enable\n > 2.Disable\n > Default (Enable)\nchoice[1-2]: '`" _ntfs
  if [[ "$_ntfs" = "1" ]]; then
    msg2 "Enable ntfs"
    scripts/config --module CONFIG_NTFS_FS
    scripts/config --enable CONFIG_NTFS_RW
    msg2 "Enable ntfs3"
    scripts/config --module CONFIG_NTFS3_FS
    scripts/config --enable CONFIG_NTFS3_64BIT_CLUSTER
    scripts/config --enable CONFIG_NTFS3_LZX_XPRESS
    scripts/config --enable CONFIG_NTFS3_FS_POSIX_ACL
  elif [[ "$_ntfs" = "2" ]]; then
    msg2 "Disable ntfs"
    scripts/config --disable CONFIG_NTFS_FS
    scripts/config --disable CONFIG_NTFS_RW
    msg2 "Disable ntfs3"
    scripts/config --disable CONFIG_NTFS3_FS
    scripts/config --disable CONFIG_NTFS3_64BIT_CLUSTER
    scripts/config --disable CONFIG_NTFS3_LZX_XPRESS
    scripts/config --disable CONFIG_NTFS3_FS_POSIX_ACL
  else
    msg2 "Enable ntfs"
    scripts/config --module CONFIG_NTFS_FS
    scripts/config --enable CONFIG_NTFS_RW
    msg2 "Enable ntfs3"
    scripts/config --module CONFIG_NTFS3_FS
    scripts/config --enable CONFIG_NTFS3_64BIT_CLUSTER
    scripts/config --enable CONFIG_NTFS3_LZX_XPRESS
    scripts/config --enable CONFIG_NTFS3_FS_POSIX_ACL
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Enable/disable BBR/BBR2 TCP"
  plain ""
  plain "BBR :"
  plain "BBR (Bottleneck Bandwidth and RTT) TCP congestion control aims to"
  plain "maximize network utilization and minimize queues. It builds an explicit"
  plain "model of the bottleneck delivery rate and path round-trip propagation"
  plain "delay. It tolerates packet loss and delay unrelated to congestion. It"
  plain "can operate over LAN, WAN, cellular, wifi, or cable modem links. It can"
  plain "coexist with flows that use loss-based congestion control, and can"
  plain "operate with shallow buffers, deep buffers, bufferbloat, policers, or"
  plain "AQM schemes that do not provide a delay signal. It requires the fq"
  plain "(Fair Queue) pacing packet scheduler."
  plain ""
  plain "BBR2 :"
  plain "BBR2 TCP congestion control is a model-based congestion control"
  plain "algorithm that aims to maximize network utilization, keep queues and"
  plain "retransmit rates low, and to be able to coexist with Reno/CUBIC in"
  plain "common scenarios. It builds an explicit model of the network path.  It"
  plain "tolerates a targeted degree of random packet loss and delay that are"
  plain "unrelated to congestion. It can operate over LAN, WAN, cellular, wifi,"
  plain "or cable modem links, and can use DCTCP-L4S-style ECN signals.  It can"
  plain "coexist with flows that use loss-based congestion control, and can"
  plain "operate with shallow buffers, deep buffers, bufferbloat, policers, or"
  plain "AQM schemes that do not provide a delay signal. It requires pacing,"
  plain "using either TCP internal pacing or the fq (Fair Queue) pacing packet"
  plain "scheduler."
  plain ""
  read -rp "`echo $' > 1.Enable\n > 2.Disable\n > Default (Enable)\nchoice[1-2]: '`" _bbr
  if [[ "$_bbr" = "1" ]]; then
    msg2 "Enable BBR/BBR2 TCP"
    scripts/config --module CONFIG_TCP_CONG_BBR
    scripts/config --module CONFIG_TCP_CONG_BBR2
  elif [[ "$_bbr" = "1" ]]; then
    msg2 "Disable BBR/BBR2 TCP"
    scripts/config --disable CONFIG_TCP_CONG_BBR
    scripts/config --disable CONFIG_TCP_CONG_BBR2
  else
    msg2 "Enable BBR/BBR2 TCP"
    scripts/config --module CONFIG_TCP_CONG_BBR
    scripts/config --module CONFIG_TCP_CONG_BBR2
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Enable/disable Virtual (SCSI) Host Bus Adapter (VHBA)"
  plain ""
  plain "This is the in-kernel part of CDEmu, a CD/DVD-ROM device emulator."
  plain "This driver can also be built as a module. If so, the module will be called vhba."
  plain ""
  read -rp "`echo $' > 1.Enable\n > 2.Disable\n > Default (Enable)\nchoice[1-2]: '`" _vhba
  if [[ "$_vhba" = "1" ]]; then
    msg2 "Enable CONFIG_VHBA"
    scripts/config --module CONFIG_VHBA
  elif [[ "$_vhba" = "2" ]]; then
    msg2 "Disable CONFIG_VHBA"
    scripts/config --disable CONFIG_VHBA
  else
    msg2 "Enable CONFIG_VHBA"
    scripts/config --module CONFIG_VHBA
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Enable/disable Kyber I/O Scheduler"
  plain ""
  plain "The Kyber I/O scheduler is a low-overhead scheduler suitable for"
  plain "multiqueue and other fast devices. Given target latencies for reads"
  plain "and synchronous writes, it will self-tune queue depths to achieve"
  plain "that goal."
  plain ""
  read -rp "`echo $' > 1.Disable\n > 2.Enable\n > Default (Disable)\nchoice[1-2]: '`" _kyber
  if [[ "$_kyber" = "1" ]]; then
    msg2 "Disabling Kyber I/O scheduler"
    scripts/config --disable CONFIG_MQ_IOSCHED_KYBER
  elif [[ "$_kyber" = "2" ]]; then
    msg2 "Enable Kyber I/O scheduler"
    scripts/config --enable CONFIG_MQ_IOSCHED_KYBER
  else
    msg2 "Disabling Kyber I/O scheduler"
    scripts/config --disable CONFIG_MQ_IOSCHED_KYBER
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Enable/disable MQ-Deadline I/O Scheduler"
  plain ""
  plain "MQ version of the deadline IO scheduler.MQ version of the deadline"
  plain "IO scheduler."
  plain ""
  plain "deadline i/o scheduler : The goal of the deadline io scheduler is"
  plain "to attempt to guarantee a start service time for a request. As we"
  plain "focus mainly on read latencies, this is tunable. When a read request"
  plain "first enters the io scheduler, it is assigned a deadline that is the"
  plain "current time + the read_expire value in units of milliseconds."
  plain ""
  read -rp "`echo $' > 1.Disable\n > 2.Enable\n > Default (Disable)\nchoice[1-2]: '`" _deadline
  if [[ "$_deadline" = "1" ]]; then
    msg2 "Disabling MQ-Deadline I/O scheduler"
    scripts/config --disable CONFIG_MQ_IOSCHED_DEADLINE
    scripts/config --disable CONFIG_MQ_IOSCHED_DEADLINE_NODEFAULT
  elif [[ "$_deadline" = "2" ]]; then
    msg2 "Enable Deadline I/O scheduler"
    scripts/config --enable CONFIG_MQ_IOSCHED_DEADLINE

    sleep 2s

    plain ""
    plain "#########################################"
    plain "Enable/disable MQ-Deadline-Nodefault I/O Scheduler"
    plain ""
    plain "This renames the mq-deadline scheduler to "mq-deadline-nodefault""
    plain "and also drops its alias of "deadline"."
    plain "This can prevent existing userspace from forcing this scheduler"
    plain "over the kernel's choice."
    plain ""
    read -rp "`echo $' > 1.Disable\n > 2.Enable\n > Default (Enable)\nchoice[1-2]: '`" _deadline_nodefault
    if [[ "$_deadline_nodefault" = "1" ]]; then
      msg2 "Disable MQ-Deadline-Nodefault I/O scheduler"
      scripts/config --disable CONFIG_MQ_IOSCHED_DEADLINE_NODEFAULT
    elif [[ "$_deadline_nodefault" = "2" ]]; then
      msg2 "Enable MQ-Deadline-Nodefault I/O scheduler"
      scripts/config --enable CONFIG_MQ_IOSCHED_DEADLINE_NODEFAULT
    else
      msg2 "Enable MQ-Deadline-Nodefault I/O scheduler"
      scripts/config --enable CONFIG_MQ_IOSCHED_DEADLINE_NODEFAULT
    fi
  else
    msg2 "Disable MQ-Deadline I/O scheduler"
    scripts/config --disable CONFIG_MQ_IOSCHED_DEADLINE
    scripts/config --disable CONFIG_MQ_IOSCHED_DEADLINE_NODEFAULT
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Enable/disable CONFIG_BFQ_CGROUP_DEBUG"
  read -rp "`echo $' > 1.Disable\n > 2.Enable\n > Default (Enable)\nchoice[1-2]: '`" _bfq_cgroup
  if [[ "$_bfq_cgroup" = "1" ]]; then
    msg2 "disable CONFIG_BFQ_CGROUP_DEBUG"
    scripts/config --disable CONFIG_BFQ_CGROUP_DEBUG
  elif [[ "$_bfq_cgroup" = "2" ]]; then
    msg2 "Enable CONFIG_BFQ_CGROUP_DEBUG"
    scripts/config --enable CONFIG_BFQ_CGROUP_DEBUG
  else
    msg2 "Enable CONFIG_BFQ_CGROUP_DEBUG"
    scripts/config --enable CONFIG_BFQ_CGROUP_DEBUG
  fi

  sleep 2s
  
  plain ""
  plain "#########################################"
  plain "Enable/disable CONFIG_SCHED_AUTOGROUP_DEFAULT_ENABLED"
  plain ""
  plain "If set, automatic process group scheduling will be enabled per"
  plain "default but can be disabled through passing autogroup=0 on the"
  plain "kernel commandline during boot or a value of 0 via the file"
  plain "proc/sys/kernel/sched_autogroup_enabled."
  plain ""
  read -rp "`echo $' > 1.Enable\n > 2.Disable\n > Default (Enable)\nchoice[1-2]: '`" _autogroup
  if [[ "$_autogroup" = "1" ]]; then
    msg2 "Enable CONFIG_SCHED_AUTOGROUP_DEFAULT_ENABLED"
    scripts/config --enable CONFIG_SCHED_AUTOGROUP_DEFAULT_ENABLED
  elif [[ "$_autogroup" = "2" ]]; then
    msg2 "Disable CONFIG_SCHED_AUTOGROUP_DEFAULT_ENABLED"
    scripts/config --disable CONFIG_SCHED_AUTOGROUP_DEFAULT_ENABLED
  else
    msg2 "Enable CONFIG_SCHED_AUTOGROUP_DEFAULT_ENABLED"
    scripts/config --enable CONFIG_SCHED_AUTOGROUP_DEFAULT_ENABLED
  fi

  sleep 2s

  if [[ $_cpu_sched != "1" ]] && [[ $_cpu_sched != "2" ]]; then
    plain ""
    plain "#########################################"
    plain "Enable ZEN_INTERACTIVE a selection of patches from Zen/Liquorix kernel"
    plain "and additional tweaks for a better gaming experience (ZENIFY)"
    plain ""
    plain "Tunes the kernel for responsiveness at the cost of throughput and power usage."
    read -rp "`echo $' > 1.Enable\n > 2.Disable\n > Default (Enable)\nchoice[1-2]: '`" _zen_interactive
    if [[ "$_zen_interactive" = "1" ]]; then
      msg2 "Enable ZEN_INTERACTIVE"
      scripts/config --enable ZEN_INTERACTIVE
    elif [[ "$_zen_interactive" = "2" ]]; then
      msg2 "Disable ZEN_INTERACTIVE"
      scripts/config --disable ZEN_INTERACTIVE
    else
      msg2 "Enable ZEN_INTERACTIVE"
      scripts/config --enable ZEN_INTERACTIVE
    fi

    sleep 2s
  fi

  plain ""
  plain "#########################################"
  plain "Enable support for fsync, an experimental replacement for esync in"
  plain "Valve Proton 4.11+"
  read -rp "`echo $' > 1.Enable\n > 2.Disable\n > Default (Enable)\nchoice[1-2]: '`" _fsync
  if [[ "$_fsync" = "1" ]]; then
    msg2 "Enable Fsync support"
    scripts/config --enable CONFIG_FUTEX
    scripts/config --enable CONFIG_FUTEX_PI
  elif [[ "$_fsync" = "2" ]]; then
    msg2 "Disable Fsync support"
    scripts/config --disable CONFIG_FUTEX
    scripts/config --disable CONFIG_FUTEX_PI
  else
    msg2 "Enable Fsync support"
    scripts/config --enable CONFIG_FUTEX
    scripts/config --enable CONFIG_FUTEX_PI
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Enable support for futex2, an experimental replacement for esync and"
  plain "fsync in Valve Proton 5.13 experimental"
  plain "Can be enabled alongside regular fsync patchset to have a fallback option"
  plain "Enabling Futex2 will enable fsync support by default"
  plain "https://gitlab.collabora.com/tonyk/linux/-/tree/futex2-dev"
  plain "https://github.com/ValveSoftware/Proton/issues/4568"
  plain ""
  read -rp "`echo $' > 1.Enable\n > 2.Disable\n > Default (Enable)\nchoice[1-2]: '`" _futex2
  if [[ "$_futex2" = "1" ]]; then
    msg2 "Enable Futex2 support"
    scripts/config --enable CONFIG_FUTEX2
  elif [[ "$_futex2" = "2" ]]; then
    msg2 "Disable Futex2 support"
    scripts/config --disable CONFIG_FUTEX2
  else
    msg2 "Enable Futex2 support"
    scripts/config --enable CONFIG_FUTEX2
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Enable support for winesync, an experimental replacement for esync"
  plain "https://repo.or.cz/linux/zf.git/shortlog/refs/heads/winesync"
  read -rp "`echo $' > 1.Enable\n > 2.Disable\n > Default (Enable)\nchoice[1-2]: '`" _wine
  if [[ "$_wine" = "1" ]]; then
    msg2 "Enable winesync support"
    scripts/config --module CONFIG_WINESYNC
  elif [[ "$_wine" = "2" ]]; then
    msg2 "Disable winesync support"
    scripts/config --disable CONFIG_WINESYNC
  else
    msg2 "Enable winesync support"
    scripts/config --module CONFIG_WINESYNC
  fi

  sleep 2s

  plain ""
  plain "#########################################"
  plain "Enable SECURITY_FORK_BRUT, Fork brute force attack detection"
  plain "and mitigation"
  plain ""
  plain "This is an LSM that stops any fork brute force attack against"
  plain "vulnerable userspace processes. The detection method is based on"
  plain "the application crash period and as a mitigation procedure all the"
  plain "offending tasks are killed. Also, the executable file involved in the"
  plain "attack will be marked as not allowed and new execve system calls"
  plain "using this file will fail. Like capabilities, this security module"
  plain "stacks with other LSMs."
  read -rp "`echo $' > 1.Enable\n > 2.Disable\n > Default (Enable)\nchoice[1-2]: '`" _security
  if [[ "$_security" = "1" ]]; then
    msg2 "Enable SECURITY_FORK_BRUT"
    scripts/config --enable CONFIG_SECURITY_FORK_BRUT
  elif [[ "$_security" = "1" ]]; then
    msg2 "Enable SECURITY_FORK_BRUT"
    scripts/config --disable CONFIG_SECURITY_FORK_BRUT
  else
    msg2 "Enable SECURITY_FORK_BRUT"
    scripts/config --enable CONFIG_SECURITY_FORK_BRUT
  fi

  sleep 2s
  
  plain ""
  plain "#########################################"
  plain "Enable/disable OpenRGB SMBus access?"
  plain ""
  plain "Nuvoton NCT6775 and compatible SMBus controller"
  plain ""
  plain "If you say yes to this option, support will be included for the"
  plain "Nuvoton NCT6775 and compatible SMBus controllers."
  plain ""
  plain "SMBus access is necessary for controlling RGB RAM and" 
  plain "certain motherboard on-board LEDs."
  plain "If you are not trying to use OpenRGB to control RGB RAM or motherboard" 
  plain "LEDs, you may skip this section."
  plain ""
  plain "ASUS and ASRock motherboards have their RGB controller on an SMBus interface that" 
  plain "is not accessible by an unmodified Linux kernel (for now)."
  read -rp "`echo $' > 1.Enable\n > 2.Disable\n > Default (Enable)\nchoice[1-2]: '`" _openrgb
  if [[ "$_openrgb" = "1" ]]; then
    msg2 "Enable OpenRGB SMBus access"
    scripts/config --module CONFIG_I2C_NCT6775
  elif [[ "$_openrgb" = "2" ]]; then
    msg2 "Disable OpenRGB SMBus access"
    scripts/config --disable CONFIG_I2C_NCT6775
  else
    msg2 "Enable OpenRGB SMBus access"
    scripts/config --module CONFIG_I2C_NCT6775
  fi
   
  sleep 2s

  plain ""
  if [[ $_cpu_sched = "1" ]]; then
    msg2 "Enable CacULE CPU scheduler"
    scripts/config --enable CONFIG_CACULE_SCHED
  elif [[ $_cpu_sched = "2" ]]; then
    msg2 "Enable CacULE CPU scheduler"
    scripts/config --enable CONFIG_CACULE_SCHED
    msg2 "Enable CacULE-RDB CPU scheduler"
    scripts/config --enable CONFIG_CACULE_RDB
  elif [[ $_cpu_sched = "3" ]]; then
    msg2 "Enable CONFIG_SCHED_ALT, this feature enable alternative CPU scheduler"
    scripts/config --enable CONFIG_SCHED_ALT
    msg2 "Enable BMQ CPU scheduler"
    scripts/config --enable CONFIG_SCHED_BMQ
    scripts/config --disable CONFIG_SCHED_PDS
  elif [[ $_cpu_sched = "4" ]]; then
    msg2 "Enable CONFIG_SCHED_ALT, this feature enable alternative CPU scheduler"
    scripts/config --enable CONFIG_SCHED_ALT
    msg2 "Enable PDS CPU scheduler"
    scripts/config --disable CONFIG_SCHED_BMQ
    scripts/config --enable CONFIG_SCHED_PDS
  elif [[ $_cpu_sched = "5" ]]; then
    msg2 "Enable MuQSS"
    scripts/config --enable CONFIG_SCHED_MC
    scripts/config --enable CONFIG_SCHED_SMT
    scripts/config --enable CONFIG_SMP
    scripts/config --enable CONFIG_SCHED_MC_PRIO
    scripts/config --enable CONFIG_SCHED_MUQSS

    plain ""
    plain "#########################################"
    plain "MuQSS configuration"
    plain ""
    plain "Set CONFIG_RQ"
    plain ""
    plain "RQ_NONE : No sharing: This is the default behaviour where the CPU"
    plain "scheduler has one runqueue per CPU, whether it is a physical or"
    plain "logical CPU (hyperthread)."
    plain ""
    plain "RQ_SMT : SMT (hyperthread) siblings : With this option enabled,"
    plain "the CPU scheduler will have one runqueue shared by SMT (hyperthread)"
    plain "siblings. As these logical cores share one physical core, sharing"
    plain "the runqueue resource can lead to decreased overhead, lower latency"
    plain "and higher throughput."
    plain ""
    plain "RQ_MC : Multicore siblings : With this option enabled, the CPU"
    plain "scheduler will have one runqueue shared by multicore siblings"
    plain "in addition to any SMT siblings. As these physical cores share"
    plain "caches, sharing the runqueue resource will lead to lower latency,"
    plain "but its effects on overhead and throughput are less predictable. As"
    plain "a general rule, 6 or fewer cores will likely benefit from this,"
    plain "while larger CPUs will only derive a latency benefit. If your"
    plain "workloads are primarily single threaded, this will possibly worsen"
    plain "throughput. If you are only concerned about latency then enable this"
    plain "regardless of how many cores you have."
    plain ""
    plain "RQ_MC_LLC : Multicore siblings (LLC) : With this option enabled, the"
    plain "CPU scheduler will behave similarly as with Multicore siblings."
    plain "This option takes LLC cache into account when scheduling tasks."
    plain "Option may benefit CPUs with multiple LLC caches, such as Ryzen and"
    plain "Xeon CPUs."
    plain ""
    plain "RQ_SMP : Symmetric Multi-Processing : With this option enabled, the"
    plain "CPU scheduler will have one runqueue shared by all physical CPUs"
    plain "unless they are on separate NUMA nodes. As physical CPUs usually do"
    plain "not share resources, sharing the runqueue will normally worsen"
    plain "throughput but improve latency. If you only care about latency"
    plain "enable this"
    plain ""
    plain "RQ_ALL : With this option enabled, the CPU scheduler will have one"
    plain "runqueue regardless of the architecture configuration, including"
    plain "across NUMA nodes. This can substantially decrease throughput in"
    plain "NUMA configurations, but light NUMA designs will not be dramatically"
    plain "affected. This option should only be chosen if latency is the"
    plain "prime concern."
    plain ""
    read -rp "`echo $' > 1.RQ_NONE\n > 2.RQ_SMT\n > 3.RQ_MC\n > 4.RQ_MC_LLC\n > 5.RQ_SMP\n > 6.RQ_ALL\n > Default (RQ_MC)\nchoice[1-6]: '`" _config_rq
    if [[ $_config_rq = "1" ]]; then
      msg2 "Set to RQ_NONE"
      scripts/config --enable CONFIG_RQ_NONE
      scripts/config --set-val CONFIG_SHARERQ 0
    elif [[ $_config_rq = "2" ]]; then
      msg2 "Set to RQ_SMT"
      scripts/config --enable CONFIG_RQ_SMT
      scripts/config --set-val CONFIG_SHARERQ 1

      sleep 2

      plain ""
      plain "#########################################"
      plain "Enable/disable CONFIG_SMT_NICE"
      plain ""
      plain "SMT nice support makes each logical CPU aware of what is running on"
      plain "its hyperthread siblings, maintaining appropriate distribution of"
      plain "CPU according to nice levels and scheduling policies at the expense"
      plain "of slightly increased overhead."
      plain "If unsure Enable"
      plain ""
      read -rp "`echo $' > 1.Disable\n > 2.Enable\n > Default (Enable)\nchoice[1-2]: '`" _smt_nice
      if [[ $_smt_nice = "1" ]]; then
        msg2 "Disable CONFIG_SMT_NICE"
        scripts/config --disable CONFIG_SMT_NICE
      elif [[ $_smt_nice = "2" ]]; then
        msg2 "Enable CONFIG_SMT_NICE"
        scripts/config --enable CONFIG_SMT_NICE
      else
        msg2 "Enable CONFIG_SMT_NICE"
        scripts/config --enable CONFIG_SMT_NICE
      fi

    elif [[ $_config_rq = "3" ]]; then
      msg2 "Set to RQ_MC"
      scripts/config --enable CONFIG_RQ_MC
      scripts/config --set-val CONFIG_SHARERQ 2
    elif [[ $_config_rq = "4" ]]; then
      msg2 "Set to RQ_MC_LLC"
      scripts/config --enable CONFIG_RQ_MC_LLC
      scripts/config --set-val CONFIG_SHARERQ 3
    elif [[ $_config_rq = "5" ]]; then
      msg2 "Set to RQ_SMP"
      scripts/config --enable CONFIG_RQ_SMP
      scripts/config --set-val CONFIG_SHARERQ 4
    elif [[ $_config_rq = "6" ]]; then
      msg2 "Set to RQ_ALL"
      scripts/config --enable CONFIG_RQ_ALL
      scripts/config --set-val CONFIG_SHARERQ 5
    else
      msg2 "Set to RQ_MC"
      scripts/config --enable CONFIG_RQ_MC
      scripts/config --set-val CONFIG_SHARERQ 2
    fi
  else
    msg2 "Enable CFS"
    scripts/config --enable SCHED_NORMAL
    scripts/config --enable SCHED_BATCH
    scripts/config --enable SCHED_IDLE
    scripts/config --enable CONFIG_CGROUP_SCHED
    scripts/config --enable CONFIG_FAIR_GROUP_SCHED
    scripts/config --enable CONFIG_CFS_BANDWIDTH
    scripts/config --enable CONFIG_SCHED_DEBUG
  fi

  sleep 2s

  if [[ $_cpu_sched = "1" ]] || [[ $_cpu_sched = "2" ]]; then
    plain ""
    plain "#########################################"
    plain "Apply suggested config by Hamad Al Marri?"
    read -rp "`echo $' > 1.Yes\n > 2.No\n > Default (No)\nchoice[1-2]: '`" _suggest_cacule
    if [[ $_suggest_cacule = "1" ]]; then
      msg2 "Apply suggested config"
      # General Setup
      echo "General Setup"
      sleep 1s
      scripts/config --disable CONFIG_EXPERT
      # Note:
      # CONFIG_NO_HZ_FULL requires you to add
      # the boot parameter "nohz_full=" in your
      # grup. For example, in case your machine
      # has 8 CPUS, "nohz_full=1-7" makes
      # all CPUs (except CPU0) adaptive ticks.
      # Without "nohz_full=1-7", no benfit of
      # selecting CONFIG_NO_HZ_FULL
      #
      # Please see the discussion here:
      # https://github.com/hamadmarri/cacule-cpu-scheduler/discussions/23#discussioncomment-711456
      #scripts/config --enable CONFIG_NO_HZ_FULL

      scripts/config --enable CONFIG_PREEMPT
      scripts/config --enable CONFIG_SCHED_AUTOGROUP
      scripts/config --disable CONFIG_BSD_PROCESS_ACCT
      scripts/config --disable CONFIG_TASK_XACCT
      scripts/config --disable CONFIG_PSI
      scripts/config --disable CONFIG_MEMCG
      scripts/config --disable CONFIG_CGROUP_CPUACCT
      scripts/config --disable CONFIG_CGROUP_DEBUG
      scripts/config --disable CONFIG_CHECKPOINT_RESTORE
      scripts/config --disable CONFIG_SLAB_MERGE_DEFAULT
      scripts/config --disable CONFIG_SLAB_FREELIST_HARDENED
      scripts/config --disable CONFIG_SLUB_CPU_PARTIAL
      scripts/config --disable CONFIG_PROFILING
      # Processor type and features
      echo "Processor type and features"
      sleep 1s
      scripts/config --disable CONFIG_RETPOLINE
      scripts/config --disable CONFIG_X86_5LEVEL
      scripts/config --disable CONFIG_KEXEC
      scripts/config --disable CONFIG_KEXEC_FILE
      scripts/config --disable CONFIG_CRASH_DUMP
      scripts/config --enable HZ_2000
      # ./scripts/config --set_val CONFIG_NR_CPUS (# number of cpus)
      # if you are not using this kernel as guest in a virtual machine,
      # then disable CONFIG_HYPERVISOR_GUEST
      #./scripts/config --disable CONFIG_HYPERVISOR_GUEST
      # Power
      echo "Power"
      sleep 1s
      scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
      scripts/config --enable CONFIG_CPU_FREQ_GOV_PERFORMANCE
      scripts/config --disable CONFIG_CPU_FREQ_GOV_ONDEMAND
      # General architecture-dependent options
      scripts/config --disable CONFIG_KPROBES
      # Kernel hacking
      echo "Kernel hacking"
      scripts/config --disable CONFIG_FTRACE
      scripts/config --disable CONFIG_DEBUG_KERNEL
      scripts/config --disable CONFIG_PAGE_EXTENSION
      scripts/config --set-val CONFIG_RCU_CPU_STALL_TIMEOUT 4
      scripts/config --disable CONFIG_PRINTK_TIME
      scripts/config --disable CONFIG_DEBUG_INFO
      scripts/config --disable CONFIG_ENABLE_MUST_CHECK
      scripts/config --disable CONFIG_STRIP_ASM_SYMS
      scripts/config --disable CONFIG_UNUSED_SYMBOLS
      scripts/config --disable CONFIG_DEBUG_FS
      scripts/config --disable CONFIG_OPTIMIZE_INLINING
      scripts/config --disable CONFIG_DEBUG_SECTION_MISMATCH
      scripts/config --disable CONFIG_SECTION_MISMATCH_WARN_ONLY
      scripts/config --disable CONFIG_STACK_VALIDATION
      scripts/config --disable CONFIG_DEBUG_FORCE_WEAK_PER_CPU
      scripts/config --disable CONFIG_MAGIC_SYSRQ
      scripts/config --disable CONFIG_MAGIC_SYSRQ_SERIAL
      scripts/config --disable CONFIG_PAGE_EXTENSION
      scripts/config --disable CONFIG_DEBUG_PAGEALLOC
      scripts/config --disable CONFIG_PAGE_OWNER
      scripts/config --disable CONFIG_DEBUG_MEMORY_INIT
      scripts/config --disable CONFIG_HARDLOCKUP_DETECTOR
      scripts/config --disable CONFIG_SOFTLOCKUP_DETECTOR
      scripts/config --disable CONFIG_DETECT_HUNG_TASK
      scripts/config --disable CONFIG_WQ_WATCHDOG
      scripts/config --set-val CONFIG_PANIC_TIMEOUT 10
      scripts/config --disable CONFIG_SCHED_DEBUG
      scripts/config --disable CONFIG_SCHEDSTATS
      scripts/config --disable CONFIG_SCHED_STACK_END_CHECK
      scripts/config --disable CONFIG_STACKTRACE
      scripts/config --disable CONFIG_DEBUG_BUGVERBOSE
      scripts/config --set-val CONFIG_RCU_CPU_STALL_TIMEOUT 4
      scripts/config --disable CONFIG_RCU_TRACE
      scripts/config --disable CONFIG_FAULT_INJECTION
      scripts/config --disable CONFIG_LATENCYTOP
      scripts/config --disable CONFIG_PROVIDE_OHCI1394_DMA_INIT
      scripts/config --disable RUNTIME_TESTING_MENU
      scripts/config --disable CONFIG_MEMTEST
      scripts/config --disable CONFIG_KGDB
      scripts/config --disable CONFIG_EARLY_PRINTK
      scripts/config --disable CONFIG_DOUBLEFAULT
    elif [[ $_suggest_cacule = "2" ]]; then
      msg2 "Skip suggested config"
    else
      msg2 "Skip suggested config"
    fi

  sleep 2s
  fi
}

cpu_arch(){
  plain ""
  plain "#########################################"
  plain "Set cpu microarchitecture optimization in GCC"
  read -rp "`echo $'   > 1) M486SX : Select this for an 486-class CPU without an FPU such as AMD/Cyrix/IBM/Intel SL/SLC/SLC2/SLC3/SX/SX2 and UMC U5S.\n \
  > 2) M486 : Select this for an 486-class CPU such as AMD/Cyrix/IBM/Intel 486DX/DX2/DX4 and UMC U5D.\n \
  > 3) M586 : Select this for an 586 or 686 series processor such as the AMD K5,the Cyrix 5x86, 6x86 and 6x86MX. This choice does not assume the RDTSC (Read Time Stamp Counter) instruction.\n \
  > 4) M586TSC : Select this for a Pentium Classic processor with the RDTSC (Read Time Stamp Counter) instruction for benchmarking.\n \
  > 5) M586MMX : Select this for a Pentium with the MMX graphics/multimedia extended instructions.\n \
  > 6) M686 : Select this for Intel Pentium Pro chips.\n \
  > 7) MPENTIUMII : Select this for Intel chips based on the Pentium-II and pre-Coppermine Celeron core.\n \
  > 8) MPENTIUMIII : Select this for Intel chips based on the Pentium-III and Celeron-Coppermine core.\n \
  > 9) MPENTIUMM : Select this for Intel Pentium M (not Pentium-4 M) notebook chips.\n \
  > 10) MPENTIUM4 : Select this for Intel Pentium 4 chips.\n \
  > 11) MK6 : Select this for an AMD K6-family processor.\n \
  > 12) MK7 : Select this for an AMD Athlon K7-family processor.\n \
  > 13) MK8 : Select this for an AMD Opteron or Athlon64 Hammer-family processor.\n \
  > 14) MK8SSE3 : Select this for improved AMD Opteron or Athlon64 Hammer-family processors.\n \
  > 15) MK10 : Select this for an AMD 61xx Eight-Core Magny-Cours, Athlon X2 7x50,Phenom X3/X4/II, Athlon II X2/X3/X4, or Turion II-family processor.\n \
  > 16) MBARCELONA : Select this for AMD Family 10h Barcelona processors.\n \
  > 17) MBOBCAT : Select this for AMD Family 14h Bobcat processors.\n \
  > 18) MJAGUAR : Select this for AMD Family 16h Jaguar processors.\n \
  > 19) MBULLDOZER : Select this for AMD Family 15h Bulldozer processors.\n \
  > 20) MPILEDRIVER : Select this for AMD Family 15h Piledriver processors.\n \
  > 21) MSTEAMROLLER : Select this for AMD Family 15h Steamroller processors.\n \
  > 22) MEXCAVATOR : Select this for AMD Family 15h Excavator processors.\n \
  > 23) MZEN : Select this for AMD Family 17h Zen processors.\n \
  > 24) MZEN2 : Select this for AMD Family 17h Zen 2 processors.\n \
  > 25) MZEN3 : Select this for AMD Family 19h Zen 3 processors. - GCC 10.3 required - CLANG 12.0.0 required\n \
  > 26) MCRUSOE : Select this for a Transmeta Crusoe processor.\n \
  > 27) MEFFICEON : Select this for a Transmeta Efficeon processor.\n \
  > 28) MWINCHIPC6 : Select this for an IDT Winchip C6 chip.\n \
  > 29) MWINCHIP3D : Select this for an IDT Winchip-2, 2A or 3.\n \
  > 30) MELAN : Select this for an AMD Elan processor.\n \
  > 31) MGEODEGX1 : Select this for a Geode GX1 (Cyrix MediaGX) chip.\n \
  > 32) MGEODE_LX Select this for AMD Geode GX and LX processors.\n \
  > 33) MCYRIXIII : Select this for a Cyrix III or C3 chip.\n \
  > 34) MVIAC3_2 : Select this for a VIA C3 "Nehemiah".\n \
  > 35) MVIAC7 : Select this for a VIA C7.\n \
  > 36) MPSC : Optimize for Intel Pentium 4, Pentium D and older Nocona/Dempsey Xeon CPUs with Intel 64bit which is compatible with x86-64.\n \
  > 37) MCORE2 : Select this for Intel Core 2 and newer Core 2 Xeons (Xeon 51xx and 53xx) CPUs.\n \
  > 38) MATOM : Select this for the Intel Atom platform.\n \
  > 39) MNEHALEM : Select this for 1st Gen Core processors in the Nehalem family.\n \
  > 40) MWESTMERE : Select this for the Intel Westmere formerly Nehalem-C family.\n \
  > 41) MSILVERMONT Select this for the Intel Silvermont platform.\n \
  > 42) MGOLDMONT : Select this for the Intel Goldmont platform including Apollo Lake and Denverton.\n \
  > 43) MGOLDMONTPLUS : Select this for the Intel Goldmont Plus platform including Gemini Lake.\n \
  > 44) MSANDYBRIDGE : Select this for 2nd Gen Core processors in the Sandy Bridge family.\n \
  > 45) MIVYBRIDGE : Select this for 3rd Gen Core processors in the Ivy Bridge family.\n \
  > 46) MHASWELL : Select this for 4th Gen Core processors in the Haswell family.\n \
  > 47) MBROADWELL : Select this for 5th Gen Core processors in the Broadwell family.\n \
  > 48) MSKYLAKE : Select this for 6th Gen Core processors in the Skylake family.\n \
  > 49) MSKYLAKEX : Select this for 6th Gen Core processors in the Skylake X family.\n \
  > 50) MCANNONLAKE : Select this for 8th Gen Core processors.\n \
  > 51) MICELAKE : Select this for 10th Gen Core processors in the Ice Lake family.\n \
  > 52) MCASCADELAKE : Select this for Xeon processors in the Cascade Lake family.\n \
  > 53) MCOOPERLAKE : Select this for Xeon processors in the Cooper Lake family. - GCC 10.1 required - CLANG 10.0.0 required\n \
  > 54) MTIGERLAKE : Select this for third-generation 10 nm process processors in the Tiger Lake family. - GCC 10.1 required - CLANG 10.0.0 required\n \
  > 55) MSAPPHIRERAPIDS : Select this for third-generation 10 nm process processors in the Sapphire Rapids family. - GCC 11 required - CLANG 12.0.0 required\n \
  > 56) MROCKETLAKE : Select this for eleventh-generation processors in the Rocket Lake family. - GCC 11 required - CLANG 12.0.0 required\n \
  > 57) MALDERLAKE : Select this for twelfth-generation processors in the Alder Lake family.- GCC 11 required - CLANG 12.0.0 required\n \
  > 58) GENERIC_CPU : Generic x86-64 CPU. Run equally well on all x86-64 CPUs.\n \
  > 59) GENERIC_CPU2 : Run equally well on all x86-64 CPUs with min support of x86-64-v2. - GCC 11 required - CLANG 12.0.0 required\n \
  > 60) GENERIC_CPU3 : Generic x86-64-v3 CPU with v3 instructions. Run equally well on all x86-64 CPUs with min support of x86-64-v3. - GCC 11 required - CLANG 12.0.0 required\n \
  > 61) GENERIC_CPU4 : Generic x86-64 CPU with v4 instructions. Run equally well on all x86-64 CPUs with min support of x86-64-v4. - GCC 11 required - CLANG 12.0.0 required\n \
  > 62) MNATIVE_INTEL : Intel-Native optimizations autodetected by GCC.\n \
  > 63) MNATIVE_AMD : AMD-Native optimizations autodetected by GCC.\n \
  > Default (58 : Gneric CPU)\nchoice[0-56]: '`" _microarchitecture

  if [[ "$_microarchitecture" = "1" ]]; then
    msg2 "Set CONFIG_M486"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_M486
  elif [[ "$_microarchitecture" = "2" ]]; then
    msg2 "Set CONFIG_M486"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_M486
  elif [[ "$_microarchitecture" = "3" ]]; then
    msg2 "Set CONFIG_M586"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_M586
  elif [[ "$_microarchitecture" = "4" ]]; then
    msg2 "Set CONFIG_M586TSC"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_M586TSC
  elif [[ "$_microarchitecture" = "5" ]]; then
    msg2 "Set CONFIG_M586MMX"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_M586MMX
  elif [[ "$_microarchitecture" = "6" ]]; then
    msg2 "Set CONFIG_M686"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_M686
  elif [[ "$_microarchitecture" = "7" ]]; then
    msg2 "Set CONFIG_MPENTIUMII"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MPENTIUMII
  elif [[ "$_microarchitecture" = "8" ]]; then
    msg2 "Set CONFIG_MPENTIUMIII"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MPENTIUMIII
  elif [[ "$_microarchitecture" = "9" ]]; then
    msg2 "Set CONFIG_MPENTIUMM"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MPENTIUMM
  elif [[ "$_microarchitecture" = "10" ]]; then
    msg2 "Set CONFIG_MPENTIUM4"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MPENTIUM4
  elif [[ "$_microarchitecture" = "11" ]]; then
    msg2 "Set CONFIG_MK6"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MK6
  elif [[ "$_microarchitecture" = "12" ]]; then
    msg2 "Set CONFIG_MK7"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MK7
  elif [[ "$_microarchitecture" = "13" ]]; then
    msg2 "Set CONFIG_MK8"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MK8
  elif [[ "$_microarchitecture" = "14" ]]; then
    msg2 "Set CONFIG_MK8SSE3"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MK8SSE3
  elif [[ "$_microarchitecture" = "15" ]]; then
    msg2 "Set CONFIG_MK10"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MK10
  elif [[ "$_microarchitecture" = "16" ]]; then
    msg2 "Set CONFIG_MBARCELONA"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MBARCELONA
  elif [[ "$_microarchitecture" = "17" ]]; then
    msg2 "Set CONFIG_MBOBCAT"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MBOBCAT
  elif [[ "$_microarchitecture" = "18" ]]; then
    msg2 "Set CONFIG_MJAGUAR"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MJAGUAR
  elif [[ "$_microarchitecture" = "19" ]]; then
    msg2 "Set CONFIG_MBULLDOZER"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MBULLDOZER
  elif [[ "$_microarchitecture" = "20" ]]; then
    msg2 "Set CONFIG_MPILEDRIVER"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MPILEDRIVER
  elif [[ "$_microarchitecture" = "21" ]]; then
    msg2 "Set CONFIG_MSTEAMROLLER"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MSTEAMROLLER
  elif [[ "$_microarchitecture" = "22" ]]; then
    msg2 "Set CONFIG_MEXCAVATOR"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MEXCAVATOR
  elif [[ "$_microarchitecture" = "23" ]]; then
    msg2 "Set CONFIG_MZEN"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MZEN
  elif [[ "$_microarchitecture" = "24" ]]; then
    msg2 "Set CONFIG_MZEN2"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MZEN2
  elif [[ "$_microarchitecture" = "25" ]]; then
    msg2 "Set CONFIG_MZEN3"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MZEN3
  elif [[ "$_microarchitecture" = "26" ]]; then
    msg2 " Set CONFIG_MCRUSOE"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MCRUSOE
  elif [[ "$_microarchitecture" = "27" ]]; then
    msg2 "Set CONFIG_MEFFICEON"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MEFFICEON
  elif [[ "$_microarchitecture" = "28" ]]; then
    msg2 "Set CONFIG_MWINCHIPC6"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MWINCHIPC6
  elif [[ "$_microarchitecture" = "29" ]]; then
    msg2 "Set CONFIG_MWINCHIP3D"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MWINCHIP3D
  elif [[ "$_microarchitecture" = "30" ]]; then
    msg2 "Set CONFIG_MELAN"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MELAN
  elif [[ "$_microarchitecture" = "31" ]]; then
    msg2 "Set CONFIG_MGEODEGX1"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MGEODEGX1
  elif [[ "$_microarchitecture" = "32" ]]; then
    msg2 "Set CONFIG_MGEODE_LX"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MGEODE_LX
  elif [[ "$_microarchitecture" = "33" ]]; then
    msg2 "Set CONFIG_MCYRIXII"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MCYRIXIII
  elif [[ "$_microarchitecture" = "34" ]]; then
    msg2 "Set CONFIG_MVIAC3_2"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MVIAC3_2
  elif [[ "$_microarchitecture" = "35" ]]; then
    msg2 "Set CONFIG_MVIAC7"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MVIAC7
  elif [[ "$_microarchitecture" = "36" ]]; then
    msg2 "Set CONFIG_MPSC"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MPSC
  elif [[ "$_microarchitecture" = "37" ]]; then
    msg2 "Set CONFIG_MCORE2"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MCORE2
  elif [[ "$_microarchitecture" = "38" ]]; then
    msg2 "Set CONFIG_MATOM"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MATOM
  elif [[ "$_microarchitecture" = "39" ]]; then
    msg2 "Set CONFIG_MNEHALEM"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MNEHALEM
  elif [[ "$_microarchitecture" = "40" ]]; then
    msg2 "Set CONFIG_MWESTMERE"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MWESTMERE
  elif [[ "$_microarchitecture" = "41" ]]; then
    msg2 "Set CONFIG_MSILVERMONT"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MSILVERMONT
  elif [[ "$_microarchitecture" = "42" ]]; then
    msg2 "Set CONFIG_MGOLDMONT"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MGOLDMONT
  elif [[ "$_microarchitecture" = "43" ]]; then
    msg2 "Set CONFIG_MGOLDMONTPLUS"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MGOLDMONTPLUS
  elif [[ "$_microarchitecture" = "44" ]]; then
    msg2 "Set CONFIG_MSANDYBRIDGE"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MSANDYBRIDGE
  elif [[ "$_microarchitecture" = "45" ]]; then
    msg2 "Set CONFIG_MIVYBRIDGE"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MIVYBRIDGE
  elif [[ "$_microarchitecture" = "46" ]]; then
    msg2 "Set CONFIG_MHASWELL"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MHASWELL
  elif [[ "$_microarchitecture" = "47" ]]; then
    msg2 "Set CONFIG_MBROADWELL"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MBROADWELL
  elif [[ "$_microarchitecture" = "48" ]]; then
    msg2 "Set CONFIG_MSKYLAKE"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MSKYLAKE
  elif [[ "$_microarchitecture" = "49" ]]; then
    msg2 "Set CONFIG_MSKYLAKEX"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MSKYLAKEX
  elif [[ "$_microarchitecture" = "50" ]]; then
    msg2 "Set CONFIG_MCANNONLAKE"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MCANNONLAKE
  elif [[ "$_microarchitecture" = "51" ]]; then
    msg2 "Set CONFIG_MICELAKE"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MICELAKE
  elif [[ "$_microarchitecture" = "52" ]]; then
    msg2 "Set CONFIG_MCASCADELAK"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MCASCADELAKE
  elif [[ "$_microarchitecture" = "53" ]]; then
    msg2 "Set CONFIG_MCOOPERLAKE"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MCOOPERLAKE
  elif [[ "$_microarchitecture" = "54" ]]; then
    msg2 "Set CONFIG_MTIGERLAKE"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MTIGERLAKE
  elif [[ "$_microarchitecture" = "55" ]]; then
    msg2 "Set CONFIG_MSAPPHIRERAPIDS"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MSAPPHIRERAPIDS
  elif [[ "$_microarchitecture" = "56" ]]; then
    msg2 "Set CONFIG_MROCKETLAKE"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MROCKETLAKE
  elif [[ "$_microarchitecture" = "57" ]]; then
    msg2 "Set CONFIG_MALDERLAKE"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MALDERLAKE
  elif [[ "$_microarchitecture" = "58" ]]; then
    msg2 "Set CONFIG_GENERIC_CPU"
    scripts/config --enable CONFIG_GENERIC_CPU
  elif [[ "$_microarchitecture" = "59" ]]; then
    msg2 "Set CONFIG_GENERIC_CPU2"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_GENERIC_CPU2
  elif [[ "$_microarchitecture" = "60" ]]; then
    msg2 "Set CONFIG_GENERIC_CPU3"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_GENERIC_CPU3
  elif [[ "$_microarchitecture" = "61" ]]; then
    msg2 "Set CONFIG_GENERIC_CPU4"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_GENERIC_CPU4
  elif [[ "$_microarchitecture" = "62" ]]; then
    msg2 "Set CONFIG_MNATIVE_INTEL"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MNATIVE_INTEL
  elif [[ "$_microarchitecture" = "63" ]]; then
    msg2 "Set CONFIG_MNATIVE_AMD"
    scripts/config --disable CONFIG_GENERIC_CPU
    scripts/config --enable CONFIG_MNATIVE_AMD
  else
    msg2 "Set CONFIG_GENERIC_CPU"
    scripts/config --enable CONFIG_GENERIC_CPU
  fi

  plain ""

  sleep 2s
}

rapid_config(){

  plain ""

  msg2 "Set SIG level to SHA512"
  scripts/config --undefine MODULE_SIG_FORCE
  scripts/config --disable MODULE_SIG_FORCE
  scripts/config --enable CONFIG_MODULE_SIG
  scripts/config --enable CONFIG_MODULE_SIG_ALL
  scripts/config --disable CONFIG_MODULE_SIG_SHA1
  scripts/config --disable CONFIG_MODULE_SIG_SHA224
  scripts/config --disable CONFIG_MODULE_SIG_SHA256
  scripts/config --disable CONFIG_MODULE_SIG_SHA384
  scripts/config --enable CONFIG_MODULE_SIG_SHA512
  scripts/config  --set-val CONFIG_MODULE_SIG_HASH "sha512"

  sleep 2s

  msg2 "Set module compression to ZSTD"
  scripts/config --disable CONFIG_MODULE_COMPRESS_NONE
  scripts/config --disable CONFIG_MODULE_COMPRESS_GZIP
  scripts/config --disable CONFIG_MODULE_COMPRESS_XZ
  scripts/config --enable CONFIG_MODULE_COMPRESS_ZSTD

  sleep 2s

  msg2 "Enable CONFIG_STACK_VALIDATION"
  scripts/config --enable CONFIG_STACK_VALIDATION

  sleep 2s

  msg2 "Enable IKCONFIG"
  scripts/config --enable CONFIG_IKCONFIG
  scripts/config --enable CONFIG_IKCONFIG_PROC

  sleep 2s

  msg2 "Disable NUMA"
  scripts/config --disable CONFIG_NUMA
  scripts/config --disable CONFIG_AMD_NUMA
  scripts/config --disable CONFIG_X86_64_ACPI_NUMA
  scripts/config --disable CONFIG_NODES_SPAN_OTHER_NODES
  scripts/config --disable CONFIG_NUMA_EMU
  scripts/config --disable CONFIG_NEED_MULTIPLE_NODES
  scripts/config --disable CONFIG_USE_PERCPU_NUMA_NODE_ID
  scripts/config --disable CONFIG_ACPI_NUMA
  scripts/config --disable CONFIG_ARCH_SUPPORTS_NUMA_BALANCING
  scripts/config --disable CONFIG_NODES_SHIFT
  scripts/config --undefine CONFIG_NODES_SHIFT
  scripts/config --disable CONFIG_NEED_MULTIPLE_NODES

  sleep 2s

  msg2 "Disable FUNCTION_TRACER/GRAPH_TRACER"
  scripts/config --disable CONFIG_FUNCTION_TRACER
  scripts/config --disable CONFIG_STACK_TRACER

  sleep 2s

  msg2 "Disable CONFIG_USER_NS_UNPRIVILEGED"
  scripts/config --enable CONFIG_USER_NS_UNPRIVILEGED

  sleep 2s

  msg2 "Set CPU Frequency scaling CONFIG_CPU_FREQ_DEFAULT_GOV/CONFIG_CPU_FREQ_GOV for performance"
  scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_POWERSAVE
  scripts/config --disable CONFIG_CPU_FREQ_GOV_POWERSAVE
  scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE
  scripts/config --disable CONFIG_CPU_FREQ_GOV_USERSPACE
  scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND
  scripts/config --disable CONFIG_CPU_FREQ_GOV_ONDEMAND
  scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_CONSERVATIVE
  scripts/config --disable CONFIG_CPU_FREQ_GOV_CONSERVATIVE
  scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
  scripts/config --disable CONFIG_CPU_FREQ_GOV_SCHEDUTIL
  scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
  scripts/config --enable CONFIG_CPU_FREQ_GOV_PERFORMANCE

  sleep 2s

  msg2 "Set CPU DEVFREQ GOV CONFIG_DEVFREQ_GOV for performance"
  scripts/config --disable CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
  scripts/config --undefine CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
  scripts/config --disable CONFIG_DEVFREQ_GOV_POWERSAVE
  scripts/config --disable CONFIG_DEVFREQ_GOV_USERSPACE
  scripts/config --disable CONFIG_DEVFREQ_GOV_PASSIVE
  scripts/config --enable CONFIG_DEVFREQ_GOV_PERFORMANCE

  sleep 2s

  msg2 "Set PCIEASPM DRIVER to performance"
  scripts/config --enable CONFIG_PCIEASPM
  scripts/config --enable CONFIG_PCIEASPM_PERFORMANCE

  sleep 2s

  msg2 "Set CONFIG_PCIE_BUS for performance"
  scripts/config --enable CONFIG_PCIE_BUS_PERFORMANCE

  sleep 2s

  msg2 "Enable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3"
  scripts/config --disable CONFIG_CC_OPTIMIZE_BASAL
  scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE
  scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_SIZE
  scripts/config --enable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3

  sleep 2s

  if [[ $_cpu_sched = "1" ]] || [[ $_cpu_sched = "2" ]]; then
    msg2 "Set timer frequency to 2000HZ"
    scripts/config --enable CONFIG_HZ_2000
    scripts/config --set-val CONFIG_HZ 2000
  else
    msg2 "Set timer frequency to 1000HZ"
    scripts/config --enable CONFIG_HZ_1000
    scripts/config --set-val CONFIG_HZ 1000
  fi

  sleep 2s

  msg2 "Enable PREEMPT"
  scripts/config --disable CONFIG_PREEMPT_NONE
  scripts/config --disable CONFIG_PREEMPT_VOLUNTARY
  scripts/config --enable CONFIG_PREEMPT
  scripts/config --enable CONFIG_PREEMPT_COUNT
  scripts/config --enable CONFIG_PREEMPTION

  sleep 2s

  msg2 "Enable CONFIG_FORCE_IRQ_THREADING"
  scripts/config --enable CONFIG_FORCE_IRQ_THREADING

  sleep 2s

  msg2 "Set to full tickless"
  scripts/config --disable CONFIG_HZ_PERIODIC
  scripts/config --disable CONFIG_NO_HZ_IDLE
  scripts/config --enable CONFIG_NO_HZ_FULL
  scripts/config --enable CONFIG_NO_HZ
  scripts/config --enable CONFIG_NO_HZ_COMMON
  #scripts/config --enable CONFIG_CONTEXT_TRACKING
  #scripts/config --disable CONFIG_CONTEXT_TRACKING_FORCE

  sleep 2s

  msg2 "Enable tristate V4L2 loopback device"
  scripts/config --module CONFIG_V4L2_LOOPBACK

  sleep 2s

  msg2 "Enable ntfs"
  scripts/config --module CONFIG_NTFS_FS
  scripts/config --enable CONFIG_NTFS_RW
  msg2 "Enable ntfs3"
  scripts/config --module CONFIG_NTFS3_FS
  scripts/config --enable CONFIG_NTFS3_64BIT_CLUSTER
  scripts/config --enable CONFIG_NTFS3_LZX_XPRESS
  scripts/config --enable CONFIG_NTFS3_FS_POSIX_ACL

  sleep 2s

  msg2 "Enable BBR/BBR2 TCP"
  scripts/config --module CONFIG_TCP_CONG_BBR
  scripts/config --module CONFIG_TCP_CONG_BBR2

  sleep 2s

  msg2 "Enable CONFIG_VHBA"
  scripts/config --module CONFIG_VHBA

  sleep 2s

  msg2 "Disabling Kyber I/O scheduler"
  scripts/config --disable CONFIG_MQ_IOSCHED_KYBER

  sleep 2s

  msg2 "Enable Deadline I/O scheduler"
  scripts/config --enable CONFIG_MQ_IOSCHED_DEADLINE

  sleep 2s

  msg2 "Enable MQ-Deadline-Nodefault I/O scheduler"
  scripts/config --enable CONFIG_MQ_IOSCHED_DEADLINE_NODEFAULT

  sleep 2s

  msg2 "Enable CONFIG_BFQ_CGROUP_DEBUG"
  scripts/config --enable CONFIG_BFQ_CGROUP_DEBUG

  sleep 2s
  
  msg2 "Enable CONFIG_SCHED_AUTOGROUP_DEFAULT_ENABLED"
  scripts/config --enable CONFIG_SCHED_AUTOGROUP_DEFAULT_ENABLED

  sleep 2s

  if [[ $_cpu_sched != "1" ]] && [[ $_cpu_sched != "2" ]]; then
    msg2 "Enable ZEN_INTERACTIVE"
    scripts/config --enable ZEN_INTERACTIVE

    sleep 2s
  fi

  msg2 "Enable Fsync support"
  scripts/config --enable CONFIG_FUTEX
  scripts/config --enable CONFIG_FUTEX_PI

  sleep 2s

  msg2 "Enable Futex2 support"
  scripts/config --enable CONFIG_FUTEX2

  sleep 2s

  msg2 "Enable winesync support"
  scripts/config --module CONFIG_WINESYNC

  sleep 2s

  msg2 "Enable SECURITY_FORK_BRUT"
  scripts/config --enable CONFIG_SECURITY_FORK_BRUT
  
  sleep 2s
  
  msg2 "Enable OpenRGB SMBus access"
  scripts/config --module CONFIG_I2C_NCT677

  sleep 2s

  if [[ $_cpu_sched = "1" ]]; then
    msg2 "Enable CacULE CPU scheduler"
    scripts/config --enable CONFIG_CACULE_SCHED
  elif [[ $_cpu_sched = "2" ]]; then
    msg2 "Enable CacULE CPU scheduler"
    scripts/config --enable CONFIG_CACULE_SCHED
    msg2 "Enable CacULE-RDB CPU scheduler"
    scripts/config --enable CONFIG_CACULE_RDB
  elif [[ $_cpu_sched = "3" ]]; then
    msg2 "Enable CONFIG_SCHED_ALT, this feature enable alternative CPU scheduler"
    scripts/config --enable CONFIG_SCHED_ALT
    msg2 "Enable BMQ CPU scheduler"
    scripts/config --enable CONFIG_SCHED_BMQ
    scripts/config --disable CONFIG_SCHED_PDS
  elif [[ $_cpu_sched = "4" ]]; then
    msg2 "Enable CONFIG_SCHED_ALT, this feature enable alternative CPU scheduler"
    scripts/config --enable CONFIG_SCHED_ALT
    msg2 "Enable PDS CPU scheduler"
    scripts/config --disable CONFIG_SCHED_BMQ
    scripts/config --enable CONFIG_SCHED_PDS
  elif [[ $_cpu_sched = "5" ]]; then
    msg2 "Enable MuQSS"
    scripts/config --enable CONFIG_SCHED_MC
    scripts/config --enable CONFIG_SCHED_SMT
    scripts/config --enable CONFIG_SMP
    scripts/config --enable CONFIG_SCHED_MC_PRIO
    scripts/config --enable CONFIG_SCHED_MUQSS
    msg2 "Set to RQ_MC"
    scripts/config --enable CONFIG_RQ_MC
    scripts/config --set-val CONFIG_SHARERQ 2
  else
    msg2 "Enable CFS"
    scripts/config --enable SCHED_NORMAL
    scripts/config --enable SCHED_BATCH
    scripts/config --enable SCHED_IDLE
    scripts/config --enable CONFIG_CGROUP_SCHED
    scripts/config --enable CONFIG_FAIR_GROUP_SCHED
    scripts/config --enable CONFIG_CFS_BANDWIDTH
    scripts/config --enable CONFIG_SCHED_DEBUG
  fi

  sleep 2s

  if [[ $_cpu_sched = "1" ]] || [[ $_cpu_sched = "2" ]]; then
    msg2 "Apply suggested config by Hamad Al Marri for CacULE"
    # General Setup
    echo "General Setup"
    sleep 1s
    scripts/config --disable CONFIG_EXPERT
    # Note:
    # CONFIG_NO_HZ_FULL requires you to add
    # the boot parameter "nohz_full=" in your
    # grup. For example, in case your machine
    # has 8 CPUS, "nohz_full=1-7" makes
    # all CPUs (except CPU0) adaptive ticks.
    # Without "nohz_full=1-7", no benfit of
    # selecting CONFIG_NO_HZ_FULL
    #
    # Please see the discussion here:
    # https://github.com/hamadmarri/cacule-cpu-scheduler/discussions/23#discussioncomment-711456
    #scripts/config --enable CONFIG_NO_HZ_FULL

    scripts/config --enable CONFIG_PREEMPT
    scripts/config --enable CONFIG_SCHED_AUTOGROUP
    scripts/config --disable CONFIG_BSD_PROCESS_ACCT
    scripts/config --disable CONFIG_TASK_XACCT
    scripts/config --disable CONFIG_PSI
    scripts/config --disable CONFIG_MEMCG
    scripts/config --disable CONFIG_CGROUP_CPUACCT
    scripts/config --disable CONFIG_CGROUP_DEBUG
    scripts/config --disable CONFIG_CHECKPOINT_RESTORE
    scripts/config --disable CONFIG_SLAB_MERGE_DEFAULT
    scripts/config --disable CONFIG_SLAB_FREELIST_HARDENED
    scripts/config --disable CONFIG_SLUB_CPU_PARTIAL
    scripts/config --disable CONFIG_PROFILING
    # Processor type and features
    echo "Processor type and features"
    sleep 1s
    scripts/config --disable CONFIG_RETPOLINE
    scripts/config --disable CONFIG_X86_5LEVEL
    scripts/config --disable CONFIG_KEXEC
    scripts/config --disable CONFIG_KEXEC_FILE
    scripts/config --disable CONFIG_CRASH_DUMP
    scripts/config --enable HZ_2000
    # ./scripts/config --set_val CONFIG_NR_CPUS (# number of cpus)
    # if you are not using this kernel as guest in a virtual machine,
    # then disable CONFIG_HYPERVISOR_GUEST
    #./scripts/config --disable CONFIG_HYPERVISOR_GUEST
    # Power
    echo "Power"
    sleep 1s
    scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
    scripts/config --enable CONFIG_CPU_FREQ_GOV_PERFORMANCE
    scripts/config --disable CONFIG_CPU_FREQ_GOV_ONDEMAND
    # General architecture-dependent options
    scripts/config --disable CONFIG_KPROBES
    # Kernel hacking
    echo "Kernel hacking"
    scripts/config --disable CONFIG_FTRACE
    scripts/config --disable CONFIG_DEBUG_KERNEL
    scripts/config --disable CONFIG_PAGE_EXTENSION
    scripts/config --set-val CONFIG_RCU_CPU_STALL_TIMEOUT 4
    scripts/config --disable CONFIG_PRINTK_TIME
    scripts/config --disable CONFIG_DEBUG_INFO
    scripts/config --disable CONFIG_ENABLE_MUST_CHECK
    scripts/config --disable CONFIG_STRIP_ASM_SYMS
    scripts/config --disable CONFIG_UNUSED_SYMBOLS
    scripts/config --disable CONFIG_DEBUG_FS
    scripts/config --disable CONFIG_OPTIMIZE_INLINING
    scripts/config --disable CONFIG_DEBUG_SECTION_MISMATCH
    scripts/config --disable CONFIG_SECTION_MISMATCH_WARN_ONLY
    scripts/config --disable CONFIG_STACK_VALIDATION
    scripts/config --disable CONFIG_DEBUG_FORCE_WEAK_PER_CPU
    scripts/config --disable CONFIG_MAGIC_SYSRQ
    scripts/config --disable CONFIG_MAGIC_SYSRQ_SERIAL
    scripts/config --disable CONFIG_PAGE_EXTENSION
    scripts/config --disable CONFIG_DEBUG_PAGEALLOC
    scripts/config --disable CONFIG_PAGE_OWNER
    scripts/config --disable CONFIG_DEBUG_MEMORY_INIT
    scripts/config --disable CONFIG_HARDLOCKUP_DETECTOR
    scripts/config --disable CONFIG_SOFTLOCKUP_DETECTOR
    scripts/config --disable CONFIG_DETECT_HUNG_TASK
    scripts/config --disable CONFIG_WQ_WATCHDOG
    scripts/config --set-val CONFIG_PANIC_TIMEOUT 10
    scripts/config --disable CONFIG_SCHED_DEBUG
    scripts/config --disable CONFIG_SCHEDSTATS
    scripts/config --disable CONFIG_SCHED_STACK_END_CHECK
    scripts/config --disable CONFIG_STACKTRACE
    scripts/config --disable CONFIG_DEBUG_BUGVERBOSE
    scripts/config --set-val CONFIG_RCU_CPU_STALL_TIMEOUT 4
    scripts/config --disable CONFIG_RCU_TRACE
    scripts/config --disable CONFIG_FAULT_INJECTION
    scripts/config --disable CONFIG_LATENCYTOP
    scripts/config --disable CONFIG_PROVIDE_OHCI1394_DMA_INIT
    scripts/config --disable RUNTIME_TESTING_MENU
    scripts/config --disable CONFIG_MEMTEST
    scripts/config --disable CONFIG_KGDB
    scripts/config --disable CONFIG_EARLY_PRINTK
    scripts/config --disable CONFIG_DOUBLEFAULT

    sleep 2s
  fi

  msg2 "Set CONFIG_GENERIC_CPU"
  scripts/config --enable CONFIG_GENERIC_CPU

  sleep 2s
}
